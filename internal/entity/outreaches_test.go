// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOutreaches(t *testing.T) {
	t.Parallel()

	query := Outreaches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOutreachesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Outreaches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutreachSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OutreachExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Outreach exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OutreachExists to return true, but got false.")
	}
}

func testOutreachesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	outreachFound, err := FindOutreach(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if outreachFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOutreachesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Outreaches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOutreachesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Outreaches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOutreachesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	outreachOne := &Outreach{}
	outreachTwo := &Outreach{}
	if err = randomize.Struct(seed, outreachOne, outreachDBTypes, false, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}
	if err = randomize.Struct(seed, outreachTwo, outreachDBTypes, false, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outreachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outreachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Outreaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOutreachesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	outreachOne := &Outreach{}
	outreachTwo := &Outreach{}
	if err = randomize.Struct(seed, outreachOne, outreachDBTypes, false, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}
	if err = randomize.Struct(seed, outreachTwo, outreachDBTypes, false, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outreachOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outreachTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func outreachBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func outreachAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
	*o = Outreach{}
	return nil
}

func testOutreachesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Outreach{}
	o := &Outreach{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, outreachDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Outreach object: %s", err)
	}

	AddOutreachHook(boil.BeforeInsertHook, outreachBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	outreachBeforeInsertHooks = []OutreachHook{}

	AddOutreachHook(boil.AfterInsertHook, outreachAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	outreachAfterInsertHooks = []OutreachHook{}

	AddOutreachHook(boil.AfterSelectHook, outreachAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	outreachAfterSelectHooks = []OutreachHook{}

	AddOutreachHook(boil.BeforeUpdateHook, outreachBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	outreachBeforeUpdateHooks = []OutreachHook{}

	AddOutreachHook(boil.AfterUpdateHook, outreachAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	outreachAfterUpdateHooks = []OutreachHook{}

	AddOutreachHook(boil.BeforeDeleteHook, outreachBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	outreachBeforeDeleteHooks = []OutreachHook{}

	AddOutreachHook(boil.AfterDeleteHook, outreachAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	outreachAfterDeleteHooks = []OutreachHook{}

	AddOutreachHook(boil.BeforeUpsertHook, outreachBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	outreachBeforeUpsertHooks = []OutreachHook{}

	AddOutreachHook(boil.AfterUpsertHook, outreachAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	outreachAfterUpsertHooks = []OutreachHook{}
}

func testOutreachesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutreachesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(outreachColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutreachToManyMinistries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ministryDBTypes, false, ministryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ministryDBTypes, false, ministryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OutreachID = a.ID
	c.OutreachID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Ministries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OutreachID == b.OutreachID {
			bFound = true
		}
		if v.OutreachID == c.OutreachID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OutreachSlice{&a}
	if err = a.L.LoadMinistries(ctx, tx, false, (*[]*Outreach)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Ministries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Ministries = nil
	if err = a.L.LoadMinistries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Ministries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOutreachToManyUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OutreachID, a.ID)
	queries.Assign(&c.OutreachID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OutreachID, b.OutreachID) {
			bFound = true
		}
		if queries.Equal(v.OutreachID, c.OutreachID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OutreachSlice{&a}
	if err = a.L.LoadUsers(ctx, tx, false, (*[]*Outreach)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOutreachToManyAddOpMinistries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c, d, e Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ministry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Ministry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMinistries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OutreachID {
			t.Error("foreign key was wrong value", a.ID, first.OutreachID)
		}
		if a.ID != second.OutreachID {
			t.Error("foreign key was wrong value", a.ID, second.OutreachID)
		}

		if first.R.Outreach != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Outreach != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Ministries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Ministries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Ministries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOutreachToManyAddOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OutreachID) {
			t.Error("foreign key was wrong value", a.ID, first.OutreachID)
		}
		if !queries.Equal(a.ID, second.OutreachID) {
			t.Error("foreign key was wrong value", a.ID, second.OutreachID)
		}

		if first.R.Outreach != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Outreach != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOutreachToManySetOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OutreachID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OutreachID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OutreachID) {
		t.Error("foreign key was wrong value", a.ID, d.OutreachID)
	}
	if !queries.Equal(a.ID, e.OutreachID) {
		t.Error("foreign key was wrong value", a.ID, e.OutreachID)
	}

	if b.R.Outreach != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Outreach != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Outreach != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Outreach != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOutreachToManyRemoveOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Outreach
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OutreachID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OutreachID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Outreach != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Outreach != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Outreach != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Outreach != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOutreachesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutreachesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutreachSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutreachesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Outreaches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	outreachDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `AddressLine1`: `character varying`, `AddressLine2`: `character varying`, `PostCode`: `character varying`, `City`: `character varying`, `Country`: `character varying`}
	_               = bytes.MinRead
)

func testOutreachesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(outreachPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(outreachAllColumns) == len(outreachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOutreachesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(outreachAllColumns) == len(outreachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Outreach{}
	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outreachDBTypes, true, outreachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(outreachAllColumns, outreachPrimaryKeyColumns) {
		fields = outreachAllColumns
	} else {
		fields = strmangle.SetComplement(
			outreachAllColumns,
			outreachPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OutreachSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOutreachesUpsert(t *testing.T) {
	t.Parallel()

	if len(outreachAllColumns) == len(outreachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Outreach{}
	if err = randomize.Struct(seed, &o, outreachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Outreach: %s", err)
	}

	count, err := Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, outreachDBTypes, false, outreachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Outreach: %s", err)
	}

	count, err = Outreaches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
