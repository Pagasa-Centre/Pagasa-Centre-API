// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OutreachService is an object representing the database table.
type OutreachService struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Day        string    `boil:"day" json:"day" toml:"day" yaml:"day"`
	StartTime  time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime    time.Time `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	OutreachID string    `boil:"outreach_id" json:"outreach_id" toml:"outreach_id" yaml:"outreach_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *outreachServiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outreachServiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutreachServiceColumns = struct {
	ID         string
	Day        string
	StartTime  string
	EndTime    string
	OutreachID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Day:        "day",
	StartTime:  "start_time",
	EndTime:    "end_time",
	OutreachID: "outreach_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var OutreachServiceTableColumns = struct {
	ID         string
	Day        string
	StartTime  string
	EndTime    string
	OutreachID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "outreach_services.id",
	Day:        "outreach_services.day",
	StartTime:  "outreach_services.start_time",
	EndTime:    "outreach_services.end_time",
	OutreachID: "outreach_services.outreach_id",
	CreatedAt:  "outreach_services.created_at",
	UpdatedAt:  "outreach_services.updated_at",
}

// Generated where

var OutreachServiceWhere = struct {
	ID         whereHelperstring
	Day        whereHelperstring
	StartTime  whereHelpertime_Time
	EndTime    whereHelpertime_Time
	OutreachID whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"outreach_services\".\"id\""},
	Day:        whereHelperstring{field: "\"outreach_services\".\"day\""},
	StartTime:  whereHelpertime_Time{field: "\"outreach_services\".\"start_time\""},
	EndTime:    whereHelpertime_Time{field: "\"outreach_services\".\"end_time\""},
	OutreachID: whereHelperstring{field: "\"outreach_services\".\"outreach_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"outreach_services\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"outreach_services\".\"updated_at\""},
}

// OutreachServiceRels is where relationship names are stored.
var OutreachServiceRels = struct {
	Outreach string
}{
	Outreach: "Outreach",
}

// outreachServiceR is where relationships are stored.
type outreachServiceR struct {
	Outreach *Outreach `boil:"Outreach" json:"Outreach" toml:"Outreach" yaml:"Outreach"`
}

// NewStruct creates a new relationship struct
func (*outreachServiceR) NewStruct() *outreachServiceR {
	return &outreachServiceR{}
}

func (r *outreachServiceR) GetOutreach() *Outreach {
	if r == nil {
		return nil
	}
	return r.Outreach
}

// outreachServiceL is where Load methods for each relationship are stored.
type outreachServiceL struct{}

var (
	outreachServiceAllColumns            = []string{"id", "day", "start_time", "end_time", "outreach_id", "created_at", "updated_at"}
	outreachServiceColumnsWithoutDefault = []string{"day", "start_time", "end_time", "outreach_id"}
	outreachServiceColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	outreachServicePrimaryKeyColumns     = []string{"id"}
	outreachServiceGeneratedColumns      = []string{}
)

type (
	// OutreachServiceSlice is an alias for a slice of pointers to OutreachService.
	// This should almost always be used instead of []OutreachService.
	OutreachServiceSlice []*OutreachService
	// OutreachServiceHook is the signature for custom OutreachService hook methods
	OutreachServiceHook func(context.Context, boil.ContextExecutor, *OutreachService) error

	outreachServiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outreachServiceType                 = reflect.TypeOf(&OutreachService{})
	outreachServiceMapping              = queries.MakeStructMapping(outreachServiceType)
	outreachServicePrimaryKeyMapping, _ = queries.BindMapping(outreachServiceType, outreachServiceMapping, outreachServicePrimaryKeyColumns)
	outreachServiceInsertCacheMut       sync.RWMutex
	outreachServiceInsertCache          = make(map[string]insertCache)
	outreachServiceUpdateCacheMut       sync.RWMutex
	outreachServiceUpdateCache          = make(map[string]updateCache)
	outreachServiceUpsertCacheMut       sync.RWMutex
	outreachServiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outreachServiceAfterSelectMu sync.Mutex
var outreachServiceAfterSelectHooks []OutreachServiceHook

var outreachServiceBeforeInsertMu sync.Mutex
var outreachServiceBeforeInsertHooks []OutreachServiceHook
var outreachServiceAfterInsertMu sync.Mutex
var outreachServiceAfterInsertHooks []OutreachServiceHook

var outreachServiceBeforeUpdateMu sync.Mutex
var outreachServiceBeforeUpdateHooks []OutreachServiceHook
var outreachServiceAfterUpdateMu sync.Mutex
var outreachServiceAfterUpdateHooks []OutreachServiceHook

var outreachServiceBeforeDeleteMu sync.Mutex
var outreachServiceBeforeDeleteHooks []OutreachServiceHook
var outreachServiceAfterDeleteMu sync.Mutex
var outreachServiceAfterDeleteHooks []OutreachServiceHook

var outreachServiceBeforeUpsertMu sync.Mutex
var outreachServiceBeforeUpsertHooks []OutreachServiceHook
var outreachServiceAfterUpsertMu sync.Mutex
var outreachServiceAfterUpsertHooks []OutreachServiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutreachService) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutreachService) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutreachService) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutreachService) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutreachService) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutreachService) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutreachService) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutreachService) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutreachService) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachServiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutreachServiceHook registers your hook function for all future operations.
func AddOutreachServiceHook(hookPoint boil.HookPoint, outreachServiceHook OutreachServiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		outreachServiceAfterSelectMu.Lock()
		outreachServiceAfterSelectHooks = append(outreachServiceAfterSelectHooks, outreachServiceHook)
		outreachServiceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		outreachServiceBeforeInsertMu.Lock()
		outreachServiceBeforeInsertHooks = append(outreachServiceBeforeInsertHooks, outreachServiceHook)
		outreachServiceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		outreachServiceAfterInsertMu.Lock()
		outreachServiceAfterInsertHooks = append(outreachServiceAfterInsertHooks, outreachServiceHook)
		outreachServiceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		outreachServiceBeforeUpdateMu.Lock()
		outreachServiceBeforeUpdateHooks = append(outreachServiceBeforeUpdateHooks, outreachServiceHook)
		outreachServiceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		outreachServiceAfterUpdateMu.Lock()
		outreachServiceAfterUpdateHooks = append(outreachServiceAfterUpdateHooks, outreachServiceHook)
		outreachServiceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		outreachServiceBeforeDeleteMu.Lock()
		outreachServiceBeforeDeleteHooks = append(outreachServiceBeforeDeleteHooks, outreachServiceHook)
		outreachServiceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		outreachServiceAfterDeleteMu.Lock()
		outreachServiceAfterDeleteHooks = append(outreachServiceAfterDeleteHooks, outreachServiceHook)
		outreachServiceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		outreachServiceBeforeUpsertMu.Lock()
		outreachServiceBeforeUpsertHooks = append(outreachServiceBeforeUpsertHooks, outreachServiceHook)
		outreachServiceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		outreachServiceAfterUpsertMu.Lock()
		outreachServiceAfterUpsertHooks = append(outreachServiceAfterUpsertHooks, outreachServiceHook)
		outreachServiceAfterUpsertMu.Unlock()
	}
}

// One returns a single outreachService record from the query.
func (q outreachServiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OutreachService, error) {
	o := &OutreachService{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for outreach_services")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OutreachService records from the query.
func (q outreachServiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutreachServiceSlice, error) {
	var o []*OutreachService

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to OutreachService slice")
	}

	if len(outreachServiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OutreachService records in the query.
func (q outreachServiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count outreach_services rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outreachServiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if outreach_services exists")
	}

	return count > 0, nil
}

// Outreach pointed to by the foreign key.
func (o *OutreachService) Outreach(mods ...qm.QueryMod) outreachQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OutreachID),
	}

	queryMods = append(queryMods, mods...)

	return Outreaches(queryMods...)
}

// LoadOutreach allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outreachServiceL) LoadOutreach(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutreachService interface{}, mods queries.Applicator) error {
	var slice []*OutreachService
	var object *OutreachService

	if singular {
		var ok bool
		object, ok = maybeOutreachService.(*OutreachService)
		if !ok {
			object = new(OutreachService)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOutreachService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOutreachService))
			}
		}
	} else {
		s, ok := maybeOutreachService.(*[]*OutreachService)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOutreachService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOutreachService))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &outreachServiceR{}
		}
		args[object.OutreachID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outreachServiceR{}
			}

			args[obj.OutreachID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`outreaches`),
		qm.WhereIn(`outreaches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Outreach")
	}

	var resultSlice []*Outreach
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Outreach")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for outreaches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for outreaches")
	}

	if len(outreachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Outreach = foreign
		if foreign.R == nil {
			foreign.R = &outreachR{}
		}
		foreign.R.OutreachServices = append(foreign.R.OutreachServices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutreachID == foreign.ID {
				local.R.Outreach = foreign
				if foreign.R == nil {
					foreign.R = &outreachR{}
				}
				foreign.R.OutreachServices = append(foreign.R.OutreachServices, local)
				break
			}
		}
	}

	return nil
}

// SetOutreach of the outreachService to the related item.
// Sets o.R.Outreach to related.
// Adds o to related.R.OutreachServices.
func (o *OutreachService) SetOutreach(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Outreach) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"outreach_services\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"outreach_id"}),
		strmangle.WhereClause("\"", "\"", 2, outreachServicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutreachID = related.ID
	if o.R == nil {
		o.R = &outreachServiceR{
			Outreach: related,
		}
	} else {
		o.R.Outreach = related
	}

	if related.R == nil {
		related.R = &outreachR{
			OutreachServices: OutreachServiceSlice{o},
		}
	} else {
		related.R.OutreachServices = append(related.R.OutreachServices, o)
	}

	return nil
}

// OutreachServices retrieves all the records using an executor.
func OutreachServices(mods ...qm.QueryMod) outreachServiceQuery {
	mods = append(mods, qm.From("\"outreach_services\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"outreach_services\".*"})
	}

	return outreachServiceQuery{q}
}

// FindOutreachService retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutreachService(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OutreachService, error) {
	outreachServiceObj := &OutreachService{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"outreach_services\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, outreachServiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from outreach_services")
	}

	if err = outreachServiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return outreachServiceObj, err
	}

	return outreachServiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutreachService) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no outreach_services provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outreachServiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outreachServiceInsertCacheMut.RLock()
	cache, cached := outreachServiceInsertCache[key]
	outreachServiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outreachServiceAllColumns,
			outreachServiceColumnsWithDefault,
			outreachServiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outreachServiceType, outreachServiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outreachServiceType, outreachServiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"outreach_services\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"outreach_services\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into outreach_services")
	}

	if !cached {
		outreachServiceInsertCacheMut.Lock()
		outreachServiceInsertCache[key] = cache
		outreachServiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OutreachService.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutreachService) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outreachServiceUpdateCacheMut.RLock()
	cache, cached := outreachServiceUpdateCache[key]
	outreachServiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outreachServiceAllColumns,
			outreachServicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update outreach_services, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"outreach_services\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, outreachServicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outreachServiceType, outreachServiceMapping, append(wl, outreachServicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update outreach_services row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for outreach_services")
	}

	if !cached {
		outreachServiceUpdateCacheMut.Lock()
		outreachServiceUpdateCache[key] = cache
		outreachServiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outreachServiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for outreach_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for outreach_services")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutreachServiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"outreach_services\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, outreachServicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in outreachService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all outreachService")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutreachService) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no outreach_services provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outreachServiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outreachServiceUpsertCacheMut.RLock()
	cache, cached := outreachServiceUpsertCache[key]
	outreachServiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			outreachServiceAllColumns,
			outreachServiceColumnsWithDefault,
			outreachServiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			outreachServiceAllColumns,
			outreachServicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert outreach_services, could not build update column list")
		}

		ret := strmangle.SetComplement(outreachServiceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(outreachServicePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert outreach_services, could not build conflict column list")
			}

			conflict = make([]string, len(outreachServicePrimaryKeyColumns))
			copy(conflict, outreachServicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"outreach_services\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(outreachServiceType, outreachServiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outreachServiceType, outreachServiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert outreach_services")
	}

	if !cached {
		outreachServiceUpsertCacheMut.Lock()
		outreachServiceUpsertCache[key] = cache
		outreachServiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OutreachService record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutreachService) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no OutreachService provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outreachServicePrimaryKeyMapping)
	sql := "DELETE FROM \"outreach_services\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from outreach_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for outreach_services")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outreachServiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no outreachServiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from outreach_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for outreach_services")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutreachServiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outreachServiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"outreach_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outreachServicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from outreachService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for outreach_services")
	}

	if len(outreachServiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutreachService) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutreachService(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutreachServiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutreachServiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"outreach_services\".* FROM \"outreach_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outreachServicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in OutreachServiceSlice")
	}

	*o = slice

	return nil
}

// OutreachServiceExists checks if the OutreachService row exists.
func OutreachServiceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"outreach_services\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if outreach_services exists")
	}

	return exists, nil
}

// Exists checks if the OutreachService row exists.
func (o *OutreachService) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OutreachServiceExists(ctx, exec, o.ID)
}
