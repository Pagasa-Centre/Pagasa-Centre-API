// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Outreach is an object representing the database table.
type Outreach struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	AddressLine1 string      `boil:"address_line1" json:"address_line1" toml:"address_line1" yaml:"address_line1"`
	AddressLine2 null.String `boil:"address_line2" json:"address_line2,omitempty" toml:"address_line2" yaml:"address_line2,omitempty"`
	PostCode     null.String `boil:"post_code" json:"post_code,omitempty" toml:"post_code" yaml:"post_code,omitempty"`
	City         string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Country      string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	Region       null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	VenueName    null.String `boil:"venue_name" json:"venue_name,omitempty" toml:"venue_name" yaml:"venue_name,omitempty"`
	ThumbnailURL null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`

	R *outreachR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outreachL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutreachColumns = struct {
	ID           string
	Name         string
	AddressLine1 string
	AddressLine2 string
	PostCode     string
	City         string
	Country      string
	Region       string
	VenueName    string
	ThumbnailURL string
}{
	ID:           "id",
	Name:         "name",
	AddressLine1: "address_line1",
	AddressLine2: "address_line2",
	PostCode:     "post_code",
	City:         "city",
	Country:      "country",
	Region:       "region",
	VenueName:    "venue_name",
	ThumbnailURL: "thumbnail_url",
}

var OutreachTableColumns = struct {
	ID           string
	Name         string
	AddressLine1 string
	AddressLine2 string
	PostCode     string
	City         string
	Country      string
	Region       string
	VenueName    string
	ThumbnailURL string
}{
	ID:           "outreaches.id",
	Name:         "outreaches.name",
	AddressLine1: "outreaches.address_line1",
	AddressLine2: "outreaches.address_line2",
	PostCode:     "outreaches.post_code",
	City:         "outreaches.city",
	Country:      "outreaches.country",
	Region:       "outreaches.region",
	VenueName:    "outreaches.venue_name",
	ThumbnailURL: "outreaches.thumbnail_url",
}

// Generated where

var OutreachWhere = struct {
	ID           whereHelperint
	Name         whereHelperstring
	AddressLine1 whereHelperstring
	AddressLine2 whereHelpernull_String
	PostCode     whereHelpernull_String
	City         whereHelperstring
	Country      whereHelperstring
	Region       whereHelpernull_String
	VenueName    whereHelpernull_String
	ThumbnailURL whereHelpernull_String
}{
	ID:           whereHelperint{field: "\"outreaches\".\"id\""},
	Name:         whereHelperstring{field: "\"outreaches\".\"name\""},
	AddressLine1: whereHelperstring{field: "\"outreaches\".\"address_line1\""},
	AddressLine2: whereHelpernull_String{field: "\"outreaches\".\"address_line2\""},
	PostCode:     whereHelpernull_String{field: "\"outreaches\".\"post_code\""},
	City:         whereHelperstring{field: "\"outreaches\".\"city\""},
	Country:      whereHelperstring{field: "\"outreaches\".\"country\""},
	Region:       whereHelpernull_String{field: "\"outreaches\".\"region\""},
	VenueName:    whereHelpernull_String{field: "\"outreaches\".\"venue_name\""},
	ThumbnailURL: whereHelpernull_String{field: "\"outreaches\".\"thumbnail_url\""},
}

// OutreachRels is where relationship names are stored.
var OutreachRels = struct {
	Ministries string
	Users      string
}{
	Ministries: "Ministries",
	Users:      "Users",
}

// outreachR is where relationships are stored.
type outreachR struct {
	Ministries MinistrySlice `boil:"Ministries" json:"Ministries" toml:"Ministries" yaml:"Ministries"`
	Users      UserSlice     `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*outreachR) NewStruct() *outreachR {
	return &outreachR{}
}

func (r *outreachR) GetMinistries() MinistrySlice {
	if r == nil {
		return nil
	}
	return r.Ministries
}

func (r *outreachR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// outreachL is where Load methods for each relationship are stored.
type outreachL struct{}

var (
	outreachAllColumns            = []string{"id", "name", "address_line1", "address_line2", "post_code", "city", "country", "region", "venue_name", "thumbnail_url"}
	outreachColumnsWithoutDefault = []string{"name", "address_line1", "city", "country"}
	outreachColumnsWithDefault    = []string{"id", "address_line2", "post_code", "region", "venue_name", "thumbnail_url"}
	outreachPrimaryKeyColumns     = []string{"id"}
	outreachGeneratedColumns      = []string{}
)

type (
	// OutreachSlice is an alias for a slice of pointers to Outreach.
	// This should almost always be used instead of []Outreach.
	OutreachSlice []*Outreach
	// OutreachHook is the signature for custom Outreach hook methods
	OutreachHook func(context.Context, boil.ContextExecutor, *Outreach) error

	outreachQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outreachType                 = reflect.TypeOf(&Outreach{})
	outreachMapping              = queries.MakeStructMapping(outreachType)
	outreachPrimaryKeyMapping, _ = queries.BindMapping(outreachType, outreachMapping, outreachPrimaryKeyColumns)
	outreachInsertCacheMut       sync.RWMutex
	outreachInsertCache          = make(map[string]insertCache)
	outreachUpdateCacheMut       sync.RWMutex
	outreachUpdateCache          = make(map[string]updateCache)
	outreachUpsertCacheMut       sync.RWMutex
	outreachUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outreachAfterSelectMu sync.Mutex
var outreachAfterSelectHooks []OutreachHook

var outreachBeforeInsertMu sync.Mutex
var outreachBeforeInsertHooks []OutreachHook
var outreachAfterInsertMu sync.Mutex
var outreachAfterInsertHooks []OutreachHook

var outreachBeforeUpdateMu sync.Mutex
var outreachBeforeUpdateHooks []OutreachHook
var outreachAfterUpdateMu sync.Mutex
var outreachAfterUpdateHooks []OutreachHook

var outreachBeforeDeleteMu sync.Mutex
var outreachBeforeDeleteHooks []OutreachHook
var outreachAfterDeleteMu sync.Mutex
var outreachAfterDeleteHooks []OutreachHook

var outreachBeforeUpsertMu sync.Mutex
var outreachBeforeUpsertHooks []OutreachHook
var outreachAfterUpsertMu sync.Mutex
var outreachAfterUpsertHooks []OutreachHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Outreach) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Outreach) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Outreach) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Outreach) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Outreach) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Outreach) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Outreach) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Outreach) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Outreach) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outreachAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutreachHook registers your hook function for all future operations.
func AddOutreachHook(hookPoint boil.HookPoint, outreachHook OutreachHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		outreachAfterSelectMu.Lock()
		outreachAfterSelectHooks = append(outreachAfterSelectHooks, outreachHook)
		outreachAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		outreachBeforeInsertMu.Lock()
		outreachBeforeInsertHooks = append(outreachBeforeInsertHooks, outreachHook)
		outreachBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		outreachAfterInsertMu.Lock()
		outreachAfterInsertHooks = append(outreachAfterInsertHooks, outreachHook)
		outreachAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		outreachBeforeUpdateMu.Lock()
		outreachBeforeUpdateHooks = append(outreachBeforeUpdateHooks, outreachHook)
		outreachBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		outreachAfterUpdateMu.Lock()
		outreachAfterUpdateHooks = append(outreachAfterUpdateHooks, outreachHook)
		outreachAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		outreachBeforeDeleteMu.Lock()
		outreachBeforeDeleteHooks = append(outreachBeforeDeleteHooks, outreachHook)
		outreachBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		outreachAfterDeleteMu.Lock()
		outreachAfterDeleteHooks = append(outreachAfterDeleteHooks, outreachHook)
		outreachAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		outreachBeforeUpsertMu.Lock()
		outreachBeforeUpsertHooks = append(outreachBeforeUpsertHooks, outreachHook)
		outreachBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		outreachAfterUpsertMu.Lock()
		outreachAfterUpsertHooks = append(outreachAfterUpsertHooks, outreachHook)
		outreachAfterUpsertMu.Unlock()
	}
}

// One returns a single outreach record from the query.
func (q outreachQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Outreach, error) {
	o := &Outreach{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for outreaches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Outreach records from the query.
func (q outreachQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutreachSlice, error) {
	var o []*Outreach

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Outreach slice")
	}

	if len(outreachAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Outreach records in the query.
func (q outreachQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count outreaches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outreachQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if outreaches exists")
	}

	return count > 0, nil
}

// Ministries retrieves all the ministry's Ministries with an executor.
func (o *Outreach) Ministries(mods ...qm.QueryMod) ministryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ministries\".\"outreach_id\"=?", o.ID),
	)

	return Ministries(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Outreach) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"outreach_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadMinistries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (outreachL) LoadMinistries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutreach interface{}, mods queries.Applicator) error {
	var slice []*Outreach
	var object *Outreach

	if singular {
		var ok bool
		object, ok = maybeOutreach.(*Outreach)
		if !ok {
			object = new(Outreach)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOutreach)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOutreach))
			}
		}
	} else {
		s, ok := maybeOutreach.(*[]*Outreach)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOutreach)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOutreach))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &outreachR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outreachR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ministries`),
		qm.WhereIn(`ministries.outreach_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ministries")
	}

	var resultSlice []*Ministry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ministries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ministries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ministries")
	}

	if len(ministryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Ministries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ministryR{}
			}
			foreign.R.Outreach = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OutreachID {
				local.R.Ministries = append(local.R.Ministries, foreign)
				if foreign.R == nil {
					foreign.R = &ministryR{}
				}
				foreign.R.Outreach = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (outreachL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutreach interface{}, mods queries.Applicator) error {
	var slice []*Outreach
	var object *Outreach

	if singular {
		var ok bool
		object, ok = maybeOutreach.(*Outreach)
		if !ok {
			object = new(Outreach)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOutreach)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOutreach))
			}
		}
	} else {
		s, ok := maybeOutreach.(*[]*Outreach)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOutreach)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOutreach))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &outreachR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outreachR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.outreach_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Outreach = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OutreachID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Outreach = local
				break
			}
		}
	}

	return nil
}

// AddMinistries adds the given related objects to the existing relationships
// of the outreach, optionally inserting them as new records.
// Appends related to o.R.Ministries.
// Sets related.R.Outreach appropriately.
func (o *Outreach) AddMinistries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ministry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OutreachID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ministries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"outreach_id"}),
				strmangle.WhereClause("\"", "\"", 2, ministryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OutreachID = o.ID
		}
	}

	if o.R == nil {
		o.R = &outreachR{
			Ministries: related,
		}
	} else {
		o.R.Ministries = append(o.R.Ministries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ministryR{
				Outreach: o,
			}
		} else {
			rel.R.Outreach = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the outreach, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Outreach appropriately.
func (o *Outreach) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OutreachID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"outreach_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OutreachID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &outreachR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Outreach: o,
			}
		} else {
			rel.R.Outreach = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// outreach replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Outreach's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Outreach's Users accordingly.
func (o *Outreach) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"outreach_id\" = null where \"outreach_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.OutreachID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Outreach = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Outreach.
func (o *Outreach) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OutreachID, nil)
		if rel.R != nil {
			rel.R.Outreach = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("outreach_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// Outreaches retrieves all the records using an executor.
func Outreaches(mods ...qm.QueryMod) outreachQuery {
	mods = append(mods, qm.From("\"outreaches\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"outreaches\".*"})
	}

	return outreachQuery{q}
}

// FindOutreach retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutreach(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Outreach, error) {
	outreachObj := &Outreach{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"outreaches\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, outreachObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from outreaches")
	}

	if err = outreachObj.doAfterSelectHooks(ctx, exec); err != nil {
		return outreachObj, err
	}

	return outreachObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Outreach) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no outreaches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outreachColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outreachInsertCacheMut.RLock()
	cache, cached := outreachInsertCache[key]
	outreachInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outreachAllColumns,
			outreachColumnsWithDefault,
			outreachColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outreachType, outreachMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outreachType, outreachMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"outreaches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"outreaches\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into outreaches")
	}

	if !cached {
		outreachInsertCacheMut.Lock()
		outreachInsertCache[key] = cache
		outreachInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Outreach.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Outreach) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outreachUpdateCacheMut.RLock()
	cache, cached := outreachUpdateCache[key]
	outreachUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outreachAllColumns,
			outreachPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update outreaches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"outreaches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, outreachPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outreachType, outreachMapping, append(wl, outreachPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update outreaches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for outreaches")
	}

	if !cached {
		outreachUpdateCacheMut.Lock()
		outreachUpdateCache[key] = cache
		outreachUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outreachQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for outreaches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for outreaches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutreachSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"outreaches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, outreachPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in outreach slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all outreach")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Outreach) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no outreaches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outreachColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outreachUpsertCacheMut.RLock()
	cache, cached := outreachUpsertCache[key]
	outreachUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			outreachAllColumns,
			outreachColumnsWithDefault,
			outreachColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			outreachAllColumns,
			outreachPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert outreaches, could not build update column list")
		}

		ret := strmangle.SetComplement(outreachAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(outreachPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert outreaches, could not build conflict column list")
			}

			conflict = make([]string, len(outreachPrimaryKeyColumns))
			copy(conflict, outreachPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"outreaches\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(outreachType, outreachMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outreachType, outreachMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert outreaches")
	}

	if !cached {
		outreachUpsertCacheMut.Lock()
		outreachUpsertCache[key] = cache
		outreachUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Outreach record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Outreach) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Outreach provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outreachPrimaryKeyMapping)
	sql := "DELETE FROM \"outreaches\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from outreaches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for outreaches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outreachQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no outreachQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from outreaches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for outreaches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutreachSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outreachBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"outreaches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outreachPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from outreach slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for outreaches")
	}

	if len(outreachAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Outreach) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutreach(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutreachSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutreachSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outreachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"outreaches\".* FROM \"outreaches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outreachPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in OutreachSlice")
	}

	*o = slice

	return nil
}

// OutreachExists checks if the Outreach row exists.
func OutreachExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"outreaches\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if outreaches exists")
	}

	return exists, nil
}

// Exists checks if the Outreach row exists.
func (o *Outreach) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OutreachExists(ctx, exec, o.ID)
}
