// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testApprovals(t *testing.T) {
	t.Parallel()

	query := Approvals()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testApprovalsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApprovalsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Approvals().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApprovalsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApprovalSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApprovalsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ApprovalExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Approval exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ApprovalExists to return true, but got false.")
	}
}

func testApprovalsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	approvalFound, err := FindApproval(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if approvalFound == nil {
		t.Error("want a record, got nil")
	}
}

func testApprovalsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Approvals().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testApprovalsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Approvals().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testApprovalsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	approvalOne := &Approval{}
	approvalTwo := &Approval{}
	if err = randomize.Struct(seed, approvalOne, approvalDBTypes, false, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}
	if err = randomize.Struct(seed, approvalTwo, approvalDBTypes, false, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = approvalOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = approvalTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Approvals().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testApprovalsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	approvalOne := &Approval{}
	approvalTwo := &Approval{}
	if err = randomize.Struct(seed, approvalOne, approvalDBTypes, false, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}
	if err = randomize.Struct(seed, approvalTwo, approvalDBTypes, false, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = approvalOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = approvalTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func approvalBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func approvalAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Approval) error {
	*o = Approval{}
	return nil
}

func testApprovalsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Approval{}
	o := &Approval{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, approvalDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Approval object: %s", err)
	}

	AddApprovalHook(boil.BeforeInsertHook, approvalBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	approvalBeforeInsertHooks = []ApprovalHook{}

	AddApprovalHook(boil.AfterInsertHook, approvalAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	approvalAfterInsertHooks = []ApprovalHook{}

	AddApprovalHook(boil.AfterSelectHook, approvalAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	approvalAfterSelectHooks = []ApprovalHook{}

	AddApprovalHook(boil.BeforeUpdateHook, approvalBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	approvalBeforeUpdateHooks = []ApprovalHook{}

	AddApprovalHook(boil.AfterUpdateHook, approvalAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	approvalAfterUpdateHooks = []ApprovalHook{}

	AddApprovalHook(boil.BeforeDeleteHook, approvalBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	approvalBeforeDeleteHooks = []ApprovalHook{}

	AddApprovalHook(boil.AfterDeleteHook, approvalAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	approvalAfterDeleteHooks = []ApprovalHook{}

	AddApprovalHook(boil.BeforeUpsertHook, approvalBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	approvalBeforeUpsertHooks = []ApprovalHook{}

	AddApprovalHook(boil.AfterUpsertHook, approvalAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	approvalAfterUpsertHooks = []ApprovalHook{}
}

func testApprovalsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApprovalsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(approvalColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApprovalToOneMinistryUsingMinistry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Approval
	var foreign Ministry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ministryDBTypes, false, ministryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ministry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MinistryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ministry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMinistryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ministry) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ApprovalSlice{&local}
	if err = local.L.LoadMinistry(ctx, tx, false, (*[]*Approval)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ministry = nil
	if err = local.L.LoadMinistry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testApprovalToOneUserUsingUpdatedByUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Approval
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UpdatedBy, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UpdatedByUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ApprovalSlice{&local}
	if err = local.L.LoadUpdatedByUser(ctx, tx, false, (*[]*Approval)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UpdatedByUser = nil
	if err = local.L.LoadUpdatedByUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testApprovalToOneSetOpMinistryUsingMinistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Approval
	var b, c Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, approvalDBTypes, false, strmangle.SetComplement(approvalPrimaryKeyColumns, approvalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ministry{&b, &c} {
		err = a.SetMinistry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ministry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Approvals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MinistryID, x.ID) {
			t.Error("foreign key was wrong value", a.MinistryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MinistryID))
		reflect.Indirect(reflect.ValueOf(&a.MinistryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MinistryID, x.ID) {
			t.Error("foreign key was wrong value", a.MinistryID, x.ID)
		}
	}
}

func testApprovalToOneRemoveOpMinistryUsingMinistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Approval
	var b Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, approvalDBTypes, false, strmangle.SetComplement(approvalPrimaryKeyColumns, approvalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMinistry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMinistry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Ministry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Ministry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MinistryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Approvals) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testApprovalToOneSetOpUserUsingUpdatedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Approval
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, approvalDBTypes, false, strmangle.SetComplement(approvalPrimaryKeyColumns, approvalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUpdatedByUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UpdatedByUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UpdatedByApprovals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UpdatedBy, x.ID) {
			t.Error("foreign key was wrong value", a.UpdatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UpdatedBy))
		reflect.Indirect(reflect.ValueOf(&a.UpdatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UpdatedBy, x.ID) {
			t.Error("foreign key was wrong value", a.UpdatedBy, x.ID)
		}
	}
}

func testApprovalToOneRemoveOpUserUsingUpdatedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Approval
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, approvalDBTypes, false, strmangle.SetComplement(approvalPrimaryKeyColumns, approvalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUpdatedByUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUpdatedByUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UpdatedByUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UpdatedByUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UpdatedBy) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UpdatedByApprovals) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testApprovalsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApprovalsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApprovalSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApprovalsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Approvals().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	approvalDBTypes = map[string]string{`ID`: `uuid`, `RequesterID`: `uuid`, `UpdatedBy`: `uuid`, `Type`: `text`, `RequestedRole`: `text`, `Reason`: `text`, `Status`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `MinistryID`: `uuid`}
	_               = bytes.MinRead
)

func testApprovalsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(approvalPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(approvalAllColumns) == len(approvalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testApprovalsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(approvalAllColumns) == len(approvalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Approval{}
	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, approvalDBTypes, true, approvalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(approvalAllColumns, approvalPrimaryKeyColumns) {
		fields = approvalAllColumns
	} else {
		fields = strmangle.SetComplement(
			approvalAllColumns,
			approvalPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ApprovalSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testApprovalsUpsert(t *testing.T) {
	t.Parallel()

	if len(approvalAllColumns) == len(approvalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Approval{}
	if err = randomize.Struct(seed, &o, approvalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Approval: %s", err)
	}

	count, err := Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, approvalDBTypes, false, approvalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Approval struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Approval: %s", err)
	}

	count, err = Approvals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
