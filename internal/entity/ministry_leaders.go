// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MinistryLeader is an object representing the database table.
type MinistryLeader struct {
	UserID     string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MinistryID string    `boil:"ministry_id" json:"ministry_id" toml:"ministry_id" yaml:"ministry_id"`
	AssignedAt null.Time `boil:"assigned_at" json:"assigned_at,omitempty" toml:"assigned_at" yaml:"assigned_at,omitempty"`

	R *ministryLeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ministryLeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MinistryLeaderColumns = struct {
	UserID     string
	MinistryID string
	AssignedAt string
}{
	UserID:     "user_id",
	MinistryID: "ministry_id",
	AssignedAt: "assigned_at",
}

var MinistryLeaderTableColumns = struct {
	UserID     string
	MinistryID string
	AssignedAt string
}{
	UserID:     "ministry_leaders.user_id",
	MinistryID: "ministry_leaders.ministry_id",
	AssignedAt: "ministry_leaders.assigned_at",
}

// Generated where

var MinistryLeaderWhere = struct {
	UserID     whereHelperstring
	MinistryID whereHelperstring
	AssignedAt whereHelpernull_Time
}{
	UserID:     whereHelperstring{field: "\"ministry_leaders\".\"user_id\""},
	MinistryID: whereHelperstring{field: "\"ministry_leaders\".\"ministry_id\""},
	AssignedAt: whereHelpernull_Time{field: "\"ministry_leaders\".\"assigned_at\""},
}

// MinistryLeaderRels is where relationship names are stored.
var MinistryLeaderRels = struct {
	Ministry string
	User     string
}{
	Ministry: "Ministry",
	User:     "User",
}

// ministryLeaderR is where relationships are stored.
type ministryLeaderR struct {
	Ministry *Ministry `boil:"Ministry" json:"Ministry" toml:"Ministry" yaml:"Ministry"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*ministryLeaderR) NewStruct() *ministryLeaderR {
	return &ministryLeaderR{}
}

func (r *ministryLeaderR) GetMinistry() *Ministry {
	if r == nil {
		return nil
	}
	return r.Ministry
}

func (r *ministryLeaderR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// ministryLeaderL is where Load methods for each relationship are stored.
type ministryLeaderL struct{}

var (
	ministryLeaderAllColumns            = []string{"user_id", "ministry_id", "assigned_at"}
	ministryLeaderColumnsWithoutDefault = []string{"user_id", "ministry_id"}
	ministryLeaderColumnsWithDefault    = []string{"assigned_at"}
	ministryLeaderPrimaryKeyColumns     = []string{"user_id", "ministry_id"}
	ministryLeaderGeneratedColumns      = []string{}
)

type (
	// MinistryLeaderSlice is an alias for a slice of pointers to MinistryLeader.
	// This should almost always be used instead of []MinistryLeader.
	MinistryLeaderSlice []*MinistryLeader
	// MinistryLeaderHook is the signature for custom MinistryLeader hook methods
	MinistryLeaderHook func(context.Context, boil.ContextExecutor, *MinistryLeader) error

	ministryLeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ministryLeaderType                 = reflect.TypeOf(&MinistryLeader{})
	ministryLeaderMapping              = queries.MakeStructMapping(ministryLeaderType)
	ministryLeaderPrimaryKeyMapping, _ = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, ministryLeaderPrimaryKeyColumns)
	ministryLeaderInsertCacheMut       sync.RWMutex
	ministryLeaderInsertCache          = make(map[string]insertCache)
	ministryLeaderUpdateCacheMut       sync.RWMutex
	ministryLeaderUpdateCache          = make(map[string]updateCache)
	ministryLeaderUpsertCacheMut       sync.RWMutex
	ministryLeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ministryLeaderAfterSelectMu sync.Mutex
var ministryLeaderAfterSelectHooks []MinistryLeaderHook

var ministryLeaderBeforeInsertMu sync.Mutex
var ministryLeaderBeforeInsertHooks []MinistryLeaderHook
var ministryLeaderAfterInsertMu sync.Mutex
var ministryLeaderAfterInsertHooks []MinistryLeaderHook

var ministryLeaderBeforeUpdateMu sync.Mutex
var ministryLeaderBeforeUpdateHooks []MinistryLeaderHook
var ministryLeaderAfterUpdateMu sync.Mutex
var ministryLeaderAfterUpdateHooks []MinistryLeaderHook

var ministryLeaderBeforeDeleteMu sync.Mutex
var ministryLeaderBeforeDeleteHooks []MinistryLeaderHook
var ministryLeaderAfterDeleteMu sync.Mutex
var ministryLeaderAfterDeleteHooks []MinistryLeaderHook

var ministryLeaderBeforeUpsertMu sync.Mutex
var ministryLeaderBeforeUpsertHooks []MinistryLeaderHook
var ministryLeaderAfterUpsertMu sync.Mutex
var ministryLeaderAfterUpsertHooks []MinistryLeaderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MinistryLeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MinistryLeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MinistryLeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MinistryLeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MinistryLeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MinistryLeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MinistryLeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MinistryLeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MinistryLeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryLeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMinistryLeaderHook registers your hook function for all future operations.
func AddMinistryLeaderHook(hookPoint boil.HookPoint, ministryLeaderHook MinistryLeaderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ministryLeaderAfterSelectMu.Lock()
		ministryLeaderAfterSelectHooks = append(ministryLeaderAfterSelectHooks, ministryLeaderHook)
		ministryLeaderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ministryLeaderBeforeInsertMu.Lock()
		ministryLeaderBeforeInsertHooks = append(ministryLeaderBeforeInsertHooks, ministryLeaderHook)
		ministryLeaderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ministryLeaderAfterInsertMu.Lock()
		ministryLeaderAfterInsertHooks = append(ministryLeaderAfterInsertHooks, ministryLeaderHook)
		ministryLeaderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ministryLeaderBeforeUpdateMu.Lock()
		ministryLeaderBeforeUpdateHooks = append(ministryLeaderBeforeUpdateHooks, ministryLeaderHook)
		ministryLeaderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ministryLeaderAfterUpdateMu.Lock()
		ministryLeaderAfterUpdateHooks = append(ministryLeaderAfterUpdateHooks, ministryLeaderHook)
		ministryLeaderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ministryLeaderBeforeDeleteMu.Lock()
		ministryLeaderBeforeDeleteHooks = append(ministryLeaderBeforeDeleteHooks, ministryLeaderHook)
		ministryLeaderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ministryLeaderAfterDeleteMu.Lock()
		ministryLeaderAfterDeleteHooks = append(ministryLeaderAfterDeleteHooks, ministryLeaderHook)
		ministryLeaderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ministryLeaderBeforeUpsertMu.Lock()
		ministryLeaderBeforeUpsertHooks = append(ministryLeaderBeforeUpsertHooks, ministryLeaderHook)
		ministryLeaderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ministryLeaderAfterUpsertMu.Lock()
		ministryLeaderAfterUpsertHooks = append(ministryLeaderAfterUpsertHooks, ministryLeaderHook)
		ministryLeaderAfterUpsertMu.Unlock()
	}
}

// One returns a single ministryLeader record from the query.
func (q ministryLeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MinistryLeader, error) {
	o := &MinistryLeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for ministry_leaders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MinistryLeader records from the query.
func (q ministryLeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (MinistryLeaderSlice, error) {
	var o []*MinistryLeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to MinistryLeader slice")
	}

	if len(ministryLeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MinistryLeader records in the query.
func (q ministryLeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count ministry_leaders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ministryLeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if ministry_leaders exists")
	}

	return count > 0, nil
}

// Ministry pointed to by the foreign key.
func (o *MinistryLeader) Ministry(mods ...qm.QueryMod) ministryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MinistryID),
	}

	queryMods = append(queryMods, mods...)

	return Ministries(queryMods...)
}

// User pointed to by the foreign key.
func (o *MinistryLeader) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadMinistry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ministryLeaderL) LoadMinistry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMinistryLeader interface{}, mods queries.Applicator) error {
	var slice []*MinistryLeader
	var object *MinistryLeader

	if singular {
		var ok bool
		object, ok = maybeMinistryLeader.(*MinistryLeader)
		if !ok {
			object = new(MinistryLeader)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMinistryLeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMinistryLeader))
			}
		}
	} else {
		s, ok := maybeMinistryLeader.(*[]*MinistryLeader)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMinistryLeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMinistryLeader))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ministryLeaderR{}
		}
		args[object.MinistryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ministryLeaderR{}
			}

			args[obj.MinistryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ministries`),
		qm.WhereIn(`ministries.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ministry")
	}

	var resultSlice []*Ministry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ministry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ministries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ministries")
	}

	if len(ministryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ministry = foreign
		if foreign.R == nil {
			foreign.R = &ministryR{}
		}
		foreign.R.MinistryLeaders = append(foreign.R.MinistryLeaders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MinistryID == foreign.ID {
				local.R.Ministry = foreign
				if foreign.R == nil {
					foreign.R = &ministryR{}
				}
				foreign.R.MinistryLeaders = append(foreign.R.MinistryLeaders, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ministryLeaderL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMinistryLeader interface{}, mods queries.Applicator) error {
	var slice []*MinistryLeader
	var object *MinistryLeader

	if singular {
		var ok bool
		object, ok = maybeMinistryLeader.(*MinistryLeader)
		if !ok {
			object = new(MinistryLeader)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMinistryLeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMinistryLeader))
			}
		}
	} else {
		s, ok := maybeMinistryLeader.(*[]*MinistryLeader)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMinistryLeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMinistryLeader))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ministryLeaderR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ministryLeaderR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MinistryLeaders = append(foreign.R.MinistryLeaders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MinistryLeaders = append(foreign.R.MinistryLeaders, local)
				break
			}
		}
	}

	return nil
}

// SetMinistry of the ministryLeader to the related item.
// Sets o.R.Ministry to related.
// Adds o to related.R.MinistryLeaders.
func (o *MinistryLeader) SetMinistry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ministry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ministry_leaders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ministry_id"}),
		strmangle.WhereClause("\"", "\"", 2, ministryLeaderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.MinistryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MinistryID = related.ID
	if o.R == nil {
		o.R = &ministryLeaderR{
			Ministry: related,
		}
	} else {
		o.R.Ministry = related
	}

	if related.R == nil {
		related.R = &ministryR{
			MinistryLeaders: MinistryLeaderSlice{o},
		}
	} else {
		related.R.MinistryLeaders = append(related.R.MinistryLeaders, o)
	}

	return nil
}

// SetUser of the ministryLeader to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MinistryLeaders.
func (o *MinistryLeader) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ministry_leaders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, ministryLeaderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.MinistryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &ministryLeaderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MinistryLeaders: MinistryLeaderSlice{o},
		}
	} else {
		related.R.MinistryLeaders = append(related.R.MinistryLeaders, o)
	}

	return nil
}

// MinistryLeaders retrieves all the records using an executor.
func MinistryLeaders(mods ...qm.QueryMod) ministryLeaderQuery {
	mods = append(mods, qm.From("\"ministry_leaders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ministry_leaders\".*"})
	}

	return ministryLeaderQuery{q}
}

// FindMinistryLeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMinistryLeader(ctx context.Context, exec boil.ContextExecutor, userID string, ministryID string, selectCols ...string) (*MinistryLeader, error) {
	ministryLeaderObj := &MinistryLeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ministry_leaders\" where \"user_id\"=$1 AND \"ministry_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, ministryID)

	err := q.Bind(ctx, exec, ministryLeaderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from ministry_leaders")
	}

	if err = ministryLeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ministryLeaderObj, err
	}

	return ministryLeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MinistryLeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no ministry_leaders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryLeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ministryLeaderInsertCacheMut.RLock()
	cache, cached := ministryLeaderInsertCache[key]
	ministryLeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ministryLeaderAllColumns,
			ministryLeaderColumnsWithDefault,
			ministryLeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ministry_leaders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ministry_leaders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into ministry_leaders")
	}

	if !cached {
		ministryLeaderInsertCacheMut.Lock()
		ministryLeaderInsertCache[key] = cache
		ministryLeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MinistryLeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MinistryLeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ministryLeaderUpdateCacheMut.RLock()
	cache, cached := ministryLeaderUpdateCache[key]
	ministryLeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ministryLeaderAllColumns,
			ministryLeaderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update ministry_leaders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ministry_leaders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ministryLeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, append(wl, ministryLeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update ministry_leaders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for ministry_leaders")
	}

	if !cached {
		ministryLeaderUpdateCacheMut.Lock()
		ministryLeaderUpdateCache[key] = cache
		ministryLeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ministryLeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for ministry_leaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for ministry_leaders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MinistryLeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ministry_leaders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ministryLeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in ministryLeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all ministryLeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MinistryLeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no ministry_leaders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryLeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ministryLeaderUpsertCacheMut.RLock()
	cache, cached := ministryLeaderUpsertCache[key]
	ministryLeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ministryLeaderAllColumns,
			ministryLeaderColumnsWithDefault,
			ministryLeaderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ministryLeaderAllColumns,
			ministryLeaderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert ministry_leaders, could not build update column list")
		}

		ret := strmangle.SetComplement(ministryLeaderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ministryLeaderPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert ministry_leaders, could not build conflict column list")
			}

			conflict = make([]string, len(ministryLeaderPrimaryKeyColumns))
			copy(conflict, ministryLeaderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ministry_leaders\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ministryLeaderType, ministryLeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert ministry_leaders")
	}

	if !cached {
		ministryLeaderUpsertCacheMut.Lock()
		ministryLeaderUpsertCache[key] = cache
		ministryLeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MinistryLeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MinistryLeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no MinistryLeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ministryLeaderPrimaryKeyMapping)
	sql := "DELETE FROM \"ministry_leaders\" WHERE \"user_id\"=$1 AND \"ministry_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from ministry_leaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for ministry_leaders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ministryLeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no ministryLeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministry_leaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministry_leaders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MinistryLeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ministryLeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ministry_leaders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryLeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministryLeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministry_leaders")
	}

	if len(ministryLeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MinistryLeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMinistryLeader(ctx, exec, o.UserID, o.MinistryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MinistryLeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MinistryLeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ministry_leaders\".* FROM \"ministry_leaders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryLeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MinistryLeaderSlice")
	}

	*o = slice

	return nil
}

// MinistryLeaderExists checks if the MinistryLeader row exists.
func MinistryLeaderExists(ctx context.Context, exec boil.ContextExecutor, userID string, ministryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ministry_leaders\" where \"user_id\"=$1 AND \"ministry_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, ministryID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, ministryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if ministry_leaders exists")
	}

	return exists, nil
}

// Exists checks if the MinistryLeader row exists.
func (o *MinistryLeader) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MinistryLeaderExists(ctx, exec, o.UserID, o.MinistryID)
}
