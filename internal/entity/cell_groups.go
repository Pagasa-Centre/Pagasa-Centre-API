// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CellGroup is an object representing the database table.
type CellGroup struct {
	ID       string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	LeaderID null.String `boil:"leader_id" json:"leader_id,omitempty" toml:"leader_id" yaml:"leader_id,omitempty"`

	R *cellGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cellGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CellGroupColumns = struct {
	ID       string
	Name     string
	LeaderID string
}{
	ID:       "id",
	Name:     "name",
	LeaderID: "leader_id",
}

var CellGroupTableColumns = struct {
	ID       string
	Name     string
	LeaderID string
}{
	ID:       "cell_groups.id",
	Name:     "cell_groups.name",
	LeaderID: "cell_groups.leader_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CellGroupWhere = struct {
	ID       whereHelperstring
	Name     whereHelpernull_String
	LeaderID whereHelpernull_String
}{
	ID:       whereHelperstring{field: "\"cell_groups\".\"id\""},
	Name:     whereHelpernull_String{field: "\"cell_groups\".\"name\""},
	LeaderID: whereHelpernull_String{field: "\"cell_groups\".\"leader_id\""},
}

// CellGroupRels is where relationship names are stored.
var CellGroupRels = struct {
	Leader string
	Users  string
}{
	Leader: "Leader",
	Users:  "Users",
}

// cellGroupR is where relationships are stored.
type cellGroupR struct {
	Leader *User     `boil:"Leader" json:"Leader" toml:"Leader" yaml:"Leader"`
	Users  UserSlice `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*cellGroupR) NewStruct() *cellGroupR {
	return &cellGroupR{}
}

func (r *cellGroupR) GetLeader() *User {
	if r == nil {
		return nil
	}
	return r.Leader
}

func (r *cellGroupR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// cellGroupL is where Load methods for each relationship are stored.
type cellGroupL struct{}

var (
	cellGroupAllColumns            = []string{"id", "name", "leader_id"}
	cellGroupColumnsWithoutDefault = []string{}
	cellGroupColumnsWithDefault    = []string{"id", "name", "leader_id"}
	cellGroupPrimaryKeyColumns     = []string{"id"}
	cellGroupGeneratedColumns      = []string{}
)

type (
	// CellGroupSlice is an alias for a slice of pointers to CellGroup.
	// This should almost always be used instead of []CellGroup.
	CellGroupSlice []*CellGroup
	// CellGroupHook is the signature for custom CellGroup hook methods
	CellGroupHook func(context.Context, boil.ContextExecutor, *CellGroup) error

	cellGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cellGroupType                 = reflect.TypeOf(&CellGroup{})
	cellGroupMapping              = queries.MakeStructMapping(cellGroupType)
	cellGroupPrimaryKeyMapping, _ = queries.BindMapping(cellGroupType, cellGroupMapping, cellGroupPrimaryKeyColumns)
	cellGroupInsertCacheMut       sync.RWMutex
	cellGroupInsertCache          = make(map[string]insertCache)
	cellGroupUpdateCacheMut       sync.RWMutex
	cellGroupUpdateCache          = make(map[string]updateCache)
	cellGroupUpsertCacheMut       sync.RWMutex
	cellGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cellGroupAfterSelectMu sync.Mutex
var cellGroupAfterSelectHooks []CellGroupHook

var cellGroupBeforeInsertMu sync.Mutex
var cellGroupBeforeInsertHooks []CellGroupHook
var cellGroupAfterInsertMu sync.Mutex
var cellGroupAfterInsertHooks []CellGroupHook

var cellGroupBeforeUpdateMu sync.Mutex
var cellGroupBeforeUpdateHooks []CellGroupHook
var cellGroupAfterUpdateMu sync.Mutex
var cellGroupAfterUpdateHooks []CellGroupHook

var cellGroupBeforeDeleteMu sync.Mutex
var cellGroupBeforeDeleteHooks []CellGroupHook
var cellGroupAfterDeleteMu sync.Mutex
var cellGroupAfterDeleteHooks []CellGroupHook

var cellGroupBeforeUpsertMu sync.Mutex
var cellGroupBeforeUpsertHooks []CellGroupHook
var cellGroupAfterUpsertMu sync.Mutex
var cellGroupAfterUpsertHooks []CellGroupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CellGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CellGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CellGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CellGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CellGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CellGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CellGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CellGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CellGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCellGroupHook registers your hook function for all future operations.
func AddCellGroupHook(hookPoint boil.HookPoint, cellGroupHook CellGroupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cellGroupAfterSelectMu.Lock()
		cellGroupAfterSelectHooks = append(cellGroupAfterSelectHooks, cellGroupHook)
		cellGroupAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cellGroupBeforeInsertMu.Lock()
		cellGroupBeforeInsertHooks = append(cellGroupBeforeInsertHooks, cellGroupHook)
		cellGroupBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cellGroupAfterInsertMu.Lock()
		cellGroupAfterInsertHooks = append(cellGroupAfterInsertHooks, cellGroupHook)
		cellGroupAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cellGroupBeforeUpdateMu.Lock()
		cellGroupBeforeUpdateHooks = append(cellGroupBeforeUpdateHooks, cellGroupHook)
		cellGroupBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cellGroupAfterUpdateMu.Lock()
		cellGroupAfterUpdateHooks = append(cellGroupAfterUpdateHooks, cellGroupHook)
		cellGroupAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cellGroupBeforeDeleteMu.Lock()
		cellGroupBeforeDeleteHooks = append(cellGroupBeforeDeleteHooks, cellGroupHook)
		cellGroupBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cellGroupAfterDeleteMu.Lock()
		cellGroupAfterDeleteHooks = append(cellGroupAfterDeleteHooks, cellGroupHook)
		cellGroupAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cellGroupBeforeUpsertMu.Lock()
		cellGroupBeforeUpsertHooks = append(cellGroupBeforeUpsertHooks, cellGroupHook)
		cellGroupBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cellGroupAfterUpsertMu.Lock()
		cellGroupAfterUpsertHooks = append(cellGroupAfterUpsertHooks, cellGroupHook)
		cellGroupAfterUpsertMu.Unlock()
	}
}

// One returns a single cellGroup record from the query.
func (q cellGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CellGroup, error) {
	o := &CellGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for cell_groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CellGroup records from the query.
func (q cellGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (CellGroupSlice, error) {
	var o []*CellGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to CellGroup slice")
	}

	if len(cellGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CellGroup records in the query.
func (q cellGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count cell_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cellGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if cell_groups exists")
	}

	return count > 0, nil
}

// Leader pointed to by the foreign key.
func (o *CellGroup) Leader(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *CellGroup) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"cell_group_members\" on \"users\".\"id\" = \"cell_group_members\".\"user_id\""),
		qm.Where("\"cell_group_members\".\"cell_group_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadLeader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cellGroupL) LoadLeader(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCellGroup interface{}, mods queries.Applicator) error {
	var slice []*CellGroup
	var object *CellGroup

	if singular {
		var ok bool
		object, ok = maybeCellGroup.(*CellGroup)
		if !ok {
			object = new(CellGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCellGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCellGroup))
			}
		}
	} else {
		s, ok := maybeCellGroup.(*[]*CellGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCellGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCellGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cellGroupR{}
		}
		if !queries.IsNil(object.LeaderID) {
			args[object.LeaderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cellGroupR{}
			}

			if !queries.IsNil(obj.LeaderID) {
				args[obj.LeaderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Leader = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LeaderCellGroups = append(foreign.R.LeaderCellGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LeaderID, foreign.ID) {
				local.R.Leader = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LeaderCellGroups = append(foreign.R.LeaderCellGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cellGroupL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCellGroup interface{}, mods queries.Applicator) error {
	var slice []*CellGroup
	var object *CellGroup

	if singular {
		var ok bool
		object, ok = maybeCellGroup.(*CellGroup)
		if !ok {
			object = new(CellGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCellGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCellGroup))
			}
		}
	} else {
		s, ok := maybeCellGroup.(*[]*CellGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCellGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCellGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cellGroupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cellGroupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"users\".\"id\", \"users\".\"first_name\", \"users\".\"last_name\", \"users\".\"email\", \"users\".\"hashed_password\", \"users\".\"birthday\", \"users\".\"phone\", \"users\".\"outreach_id\", \"users\".\"cell_leader_id\", \"users\".\"created_at\", \"a\".\"cell_group_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"cell_group_members\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"cell_group_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.FirstName, &one.LastName, &one.Email, &one.HashedPassword, &one.Birthday, &one.Phone, &one.OutreachID, &one.CellLeaderID, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.CellGroups = append(foreign.R.CellGroups, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CellGroups = append(foreign.R.CellGroups, local)
				break
			}
		}
	}

	return nil
}

// SetLeader of the cellGroup to the related item.
// Sets o.R.Leader to related.
// Adds o to related.R.LeaderCellGroups.
func (o *CellGroup) SetLeader(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cell_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leader_id"}),
		strmangle.WhereClause("\"", "\"", 2, cellGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LeaderID, related.ID)
	if o.R == nil {
		o.R = &cellGroupR{
			Leader: related,
		}
	} else {
		o.R.Leader = related
	}

	if related.R == nil {
		related.R = &userR{
			LeaderCellGroups: CellGroupSlice{o},
		}
	} else {
		related.R.LeaderCellGroups = append(related.R.LeaderCellGroups, o)
	}

	return nil
}

// RemoveLeader relationship.
// Sets o.R.Leader to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CellGroup) RemoveLeader(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.LeaderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("leader_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Leader = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LeaderCellGroups {
		if queries.Equal(o.LeaderID, ri.LeaderID) {
			continue
		}

		ln := len(related.R.LeaderCellGroups)
		if ln > 1 && i < ln-1 {
			related.R.LeaderCellGroups[i] = related.R.LeaderCellGroups[ln-1]
		}
		related.R.LeaderCellGroups = related.R.LeaderCellGroups[:ln-1]
		break
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the cell_group, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.CellGroups appropriately.
func (o *CellGroup) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"cell_group_members\" (\"cell_group_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &cellGroupR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				CellGroups: CellGroupSlice{o},
			}
		} else {
			rel.R.CellGroups = append(rel.R.CellGroups, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// cell_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CellGroups's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.CellGroups's Users accordingly.
func (o *CellGroup) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"cell_group_members\" where \"cell_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromCellGroupsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.CellGroups.
func (o *CellGroup) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"cell_group_members\" where \"cell_group_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromCellGroupsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromCellGroupsSlice(o *CellGroup, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.CellGroups {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.CellGroups)
			if ln > 1 && i < ln-1 {
				rel.R.CellGroups[i] = rel.R.CellGroups[ln-1]
			}
			rel.R.CellGroups = rel.R.CellGroups[:ln-1]
			break
		}
	}
}

// CellGroups retrieves all the records using an executor.
func CellGroups(mods ...qm.QueryMod) cellGroupQuery {
	mods = append(mods, qm.From("\"cell_groups\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cell_groups\".*"})
	}

	return cellGroupQuery{q}
}

// FindCellGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCellGroup(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CellGroup, error) {
	cellGroupObj := &CellGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cell_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cellGroupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from cell_groups")
	}

	if err = cellGroupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cellGroupObj, err
	}

	return cellGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CellGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no cell_groups provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cellGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cellGroupInsertCacheMut.RLock()
	cache, cached := cellGroupInsertCache[key]
	cellGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cellGroupAllColumns,
			cellGroupColumnsWithDefault,
			cellGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cellGroupType, cellGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cellGroupType, cellGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cell_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cell_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into cell_groups")
	}

	if !cached {
		cellGroupInsertCacheMut.Lock()
		cellGroupInsertCache[key] = cache
		cellGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CellGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CellGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cellGroupUpdateCacheMut.RLock()
	cache, cached := cellGroupUpdateCache[key]
	cellGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cellGroupAllColumns,
			cellGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update cell_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cell_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cellGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cellGroupType, cellGroupMapping, append(wl, cellGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update cell_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for cell_groups")
	}

	if !cached {
		cellGroupUpdateCacheMut.Lock()
		cellGroupUpdateCache[key] = cache
		cellGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cellGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for cell_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for cell_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CellGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cell_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cellGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in cellGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all cellGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CellGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no cell_groups provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cellGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cellGroupUpsertCacheMut.RLock()
	cache, cached := cellGroupUpsertCache[key]
	cellGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cellGroupAllColumns,
			cellGroupColumnsWithDefault,
			cellGroupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cellGroupAllColumns,
			cellGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert cell_groups, could not build update column list")
		}

		ret := strmangle.SetComplement(cellGroupAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cellGroupPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert cell_groups, could not build conflict column list")
			}

			conflict = make([]string, len(cellGroupPrimaryKeyColumns))
			copy(conflict, cellGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cell_groups\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cellGroupType, cellGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cellGroupType, cellGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert cell_groups")
	}

	if !cached {
		cellGroupUpsertCacheMut.Lock()
		cellGroupUpsertCache[key] = cache
		cellGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CellGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CellGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no CellGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cellGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"cell_groups\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from cell_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for cell_groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cellGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no cellGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from cell_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for cell_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CellGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cellGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cell_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cellGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from cellGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for cell_groups")
	}

	if len(cellGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CellGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCellGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CellGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CellGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cell_groups\".* FROM \"cell_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cellGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in CellGroupSlice")
	}

	*o = slice

	return nil
}

// CellGroupExists checks if the CellGroup row exists.
func CellGroupExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cell_groups\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if cell_groups exists")
	}

	return exists, nil
}

// Exists checks if the CellGroup row exists.
func (o *CellGroup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CellGroupExists(ctx, exec, o.ID)
}
