// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMinistryActivities(t *testing.T) {
	t.Parallel()

	query := MinistryActivities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMinistryActivitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryActivitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MinistryActivities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryActivitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MinistryActivitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryActivitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MinistryActivityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MinistryActivity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MinistryActivityExists to return true, but got false.")
	}
}

func testMinistryActivitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ministryActivityFound, err := FindMinistryActivity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ministryActivityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMinistryActivitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MinistryActivities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMinistryActivitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MinistryActivities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMinistryActivitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ministryActivityOne := &MinistryActivity{}
	ministryActivityTwo := &MinistryActivity{}
	if err = randomize.Struct(seed, ministryActivityOne, ministryActivityDBTypes, false, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, ministryActivityTwo, ministryActivityDBTypes, false, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ministryActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ministryActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MinistryActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMinistryActivitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ministryActivityOne := &MinistryActivity{}
	ministryActivityTwo := &MinistryActivity{}
	if err = randomize.Struct(seed, ministryActivityOne, ministryActivityDBTypes, false, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, ministryActivityTwo, ministryActivityDBTypes, false, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ministryActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ministryActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ministryActivityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func ministryActivityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryActivity) error {
	*o = MinistryActivity{}
	return nil
}

func testMinistryActivitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MinistryActivity{}
	o := &MinistryActivity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MinistryActivity object: %s", err)
	}

	AddMinistryActivityHook(boil.BeforeInsertHook, ministryActivityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ministryActivityBeforeInsertHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.AfterInsertHook, ministryActivityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ministryActivityAfterInsertHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.AfterSelectHook, ministryActivityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ministryActivityAfterSelectHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.BeforeUpdateHook, ministryActivityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ministryActivityBeforeUpdateHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.AfterUpdateHook, ministryActivityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ministryActivityAfterUpdateHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.BeforeDeleteHook, ministryActivityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ministryActivityBeforeDeleteHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.AfterDeleteHook, ministryActivityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ministryActivityAfterDeleteHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.BeforeUpsertHook, ministryActivityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ministryActivityBeforeUpsertHooks = []MinistryActivityHook{}

	AddMinistryActivityHook(boil.AfterUpsertHook, ministryActivityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ministryActivityAfterUpsertHooks = []MinistryActivityHook{}
}

func testMinistryActivitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMinistryActivitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ministryActivityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMinistryActivityToOneMinistryUsingMinistry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MinistryActivity
	var foreign Ministry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ministryActivityDBTypes, false, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ministryDBTypes, false, ministryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ministry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MinistryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ministry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMinistryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ministry) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MinistryActivitySlice{&local}
	if err = local.L.LoadMinistry(ctx, tx, false, (*[]*MinistryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ministry = nil
	if err = local.L.LoadMinistry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMinistryActivityToOneSetOpMinistryUsingMinistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MinistryActivity
	var b, c Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ministryActivityDBTypes, false, strmangle.SetComplement(ministryActivityPrimaryKeyColumns, ministryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ministry{&b, &c} {
		err = a.SetMinistry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ministry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MinistryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MinistryID != x.ID {
			t.Error("foreign key was wrong value", a.MinistryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MinistryID))
		reflect.Indirect(reflect.ValueOf(&a.MinistryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MinistryID != x.ID {
			t.Error("foreign key was wrong value", a.MinistryID, x.ID)
		}
	}
}

func testMinistryActivitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMinistryActivitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MinistryActivitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMinistryActivitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MinistryActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ministryActivityDBTypes = map[string]string{`ID`: `uuid`, `MinistryID`: `uuid`, `Name`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                       = bytes.MinRead
)

func testMinistryActivitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ministryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ministryActivityAllColumns) == len(ministryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMinistryActivitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ministryActivityAllColumns) == len(ministryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MinistryActivity{}
	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ministryActivityDBTypes, true, ministryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ministryActivityAllColumns, ministryActivityPrimaryKeyColumns) {
		fields = ministryActivityAllColumns
	} else {
		fields = strmangle.SetComplement(
			ministryActivityAllColumns,
			ministryActivityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MinistryActivitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMinistryActivitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(ministryActivityAllColumns) == len(ministryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MinistryActivity{}
	if err = randomize.Struct(seed, &o, ministryActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MinistryActivity: %s", err)
	}

	count, err := MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ministryActivityDBTypes, false, ministryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryActivity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MinistryActivity: %s", err)
	}

	count, err = MinistryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
