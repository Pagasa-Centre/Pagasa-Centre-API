// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ministry is an object representing the database table.
type Ministry struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OutreachID      int         `boil:"outreach_id" json:"outreach_id" toml:"outreach_id" yaml:"outreach_id"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	LeaderID        null.Int    `boil:"leader_id" json:"leader_id,omitempty" toml:"leader_id" yaml:"leader_id,omitempty"`
	MeetingDay      null.String `boil:"meeting_day" json:"meeting_day,omitempty" toml:"meeting_day" yaml:"meeting_day,omitempty"`
	StartTime       time.Time   `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime         null.Time   `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	MeetingLocation null.String `boil:"meeting_location" json:"meeting_location,omitempty" toml:"meeting_location" yaml:"meeting_location,omitempty"`

	R *ministryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ministryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MinistryColumns = struct {
	ID              string
	OutreachID      string
	Name            string
	Description     string
	LeaderID        string
	MeetingDay      string
	StartTime       string
	EndTime         string
	MeetingLocation string
}{
	ID:              "id",
	OutreachID:      "outreach_id",
	Name:            "name",
	Description:     "description",
	LeaderID:        "leader_id",
	MeetingDay:      "meeting_day",
	StartTime:       "start_time",
	EndTime:         "end_time",
	MeetingLocation: "meeting_location",
}

var MinistryTableColumns = struct {
	ID              string
	OutreachID      string
	Name            string
	Description     string
	LeaderID        string
	MeetingDay      string
	StartTime       string
	EndTime         string
	MeetingLocation string
}{
	ID:              "ministries.id",
	OutreachID:      "ministries.outreach_id",
	Name:            "ministries.name",
	Description:     "ministries.description",
	LeaderID:        "ministries.leader_id",
	MeetingDay:      "ministries.meeting_day",
	StartTime:       "ministries.start_time",
	EndTime:         "ministries.end_time",
	MeetingLocation: "ministries.meeting_location",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MinistryWhere = struct {
	ID              whereHelperint
	OutreachID      whereHelperint
	Name            whereHelperstring
	Description     whereHelpernull_String
	LeaderID        whereHelpernull_Int
	MeetingDay      whereHelpernull_String
	StartTime       whereHelpertime_Time
	EndTime         whereHelpernull_Time
	MeetingLocation whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"ministries\".\"id\""},
	OutreachID:      whereHelperint{field: "\"ministries\".\"outreach_id\""},
	Name:            whereHelperstring{field: "\"ministries\".\"name\""},
	Description:     whereHelpernull_String{field: "\"ministries\".\"description\""},
	LeaderID:        whereHelpernull_Int{field: "\"ministries\".\"leader_id\""},
	MeetingDay:      whereHelpernull_String{field: "\"ministries\".\"meeting_day\""},
	StartTime:       whereHelpertime_Time{field: "\"ministries\".\"start_time\""},
	EndTime:         whereHelpernull_Time{field: "\"ministries\".\"end_time\""},
	MeetingLocation: whereHelpernull_String{field: "\"ministries\".\"meeting_location\""},
}

// MinistryRels is where relationship names are stored.
var MinistryRels = struct {
	Leader   string
	Outreach string
}{
	Leader:   "Leader",
	Outreach: "Outreach",
}

// ministryR is where relationships are stored.
type ministryR struct {
	Leader   *User     `boil:"Leader" json:"Leader" toml:"Leader" yaml:"Leader"`
	Outreach *Outreach `boil:"Outreach" json:"Outreach" toml:"Outreach" yaml:"Outreach"`
}

// NewStruct creates a new relationship struct
func (*ministryR) NewStruct() *ministryR {
	return &ministryR{}
}

func (r *ministryR) GetLeader() *User {
	if r == nil {
		return nil
	}
	return r.Leader
}

func (r *ministryR) GetOutreach() *Outreach {
	if r == nil {
		return nil
	}
	return r.Outreach
}

// ministryL is where Load methods for each relationship are stored.
type ministryL struct{}

var (
	ministryAllColumns            = []string{"id", "outreach_id", "name", "description", "leader_id", "meeting_day", "start_time", "end_time", "meeting_location"}
	ministryColumnsWithoutDefault = []string{"outreach_id", "name", "start_time"}
	ministryColumnsWithDefault    = []string{"id", "description", "leader_id", "meeting_day", "end_time", "meeting_location"}
	ministryPrimaryKeyColumns     = []string{"id"}
	ministryGeneratedColumns      = []string{}
)

type (
	// MinistrySlice is an alias for a slice of pointers to Ministry.
	// This should almost always be used instead of []Ministry.
	MinistrySlice []*Ministry
	// MinistryHook is the signature for custom Ministry hook methods
	MinistryHook func(context.Context, boil.ContextExecutor, *Ministry) error

	ministryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ministryType                 = reflect.TypeOf(&Ministry{})
	ministryMapping              = queries.MakeStructMapping(ministryType)
	ministryPrimaryKeyMapping, _ = queries.BindMapping(ministryType, ministryMapping, ministryPrimaryKeyColumns)
	ministryInsertCacheMut       sync.RWMutex
	ministryInsertCache          = make(map[string]insertCache)
	ministryUpdateCacheMut       sync.RWMutex
	ministryUpdateCache          = make(map[string]updateCache)
	ministryUpsertCacheMut       sync.RWMutex
	ministryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ministryAfterSelectMu sync.Mutex
var ministryAfterSelectHooks []MinistryHook

var ministryBeforeInsertMu sync.Mutex
var ministryBeforeInsertHooks []MinistryHook
var ministryAfterInsertMu sync.Mutex
var ministryAfterInsertHooks []MinistryHook

var ministryBeforeUpdateMu sync.Mutex
var ministryBeforeUpdateHooks []MinistryHook
var ministryAfterUpdateMu sync.Mutex
var ministryAfterUpdateHooks []MinistryHook

var ministryBeforeDeleteMu sync.Mutex
var ministryBeforeDeleteHooks []MinistryHook
var ministryAfterDeleteMu sync.Mutex
var ministryAfterDeleteHooks []MinistryHook

var ministryBeforeUpsertMu sync.Mutex
var ministryBeforeUpsertHooks []MinistryHook
var ministryAfterUpsertMu sync.Mutex
var ministryAfterUpsertHooks []MinistryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ministry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ministry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ministry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ministry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ministry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ministry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ministry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ministry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ministry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMinistryHook registers your hook function for all future operations.
func AddMinistryHook(hookPoint boil.HookPoint, ministryHook MinistryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ministryAfterSelectMu.Lock()
		ministryAfterSelectHooks = append(ministryAfterSelectHooks, ministryHook)
		ministryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ministryBeforeInsertMu.Lock()
		ministryBeforeInsertHooks = append(ministryBeforeInsertHooks, ministryHook)
		ministryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ministryAfterInsertMu.Lock()
		ministryAfterInsertHooks = append(ministryAfterInsertHooks, ministryHook)
		ministryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ministryBeforeUpdateMu.Lock()
		ministryBeforeUpdateHooks = append(ministryBeforeUpdateHooks, ministryHook)
		ministryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ministryAfterUpdateMu.Lock()
		ministryAfterUpdateHooks = append(ministryAfterUpdateHooks, ministryHook)
		ministryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ministryBeforeDeleteMu.Lock()
		ministryBeforeDeleteHooks = append(ministryBeforeDeleteHooks, ministryHook)
		ministryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ministryAfterDeleteMu.Lock()
		ministryAfterDeleteHooks = append(ministryAfterDeleteHooks, ministryHook)
		ministryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ministryBeforeUpsertMu.Lock()
		ministryBeforeUpsertHooks = append(ministryBeforeUpsertHooks, ministryHook)
		ministryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ministryAfterUpsertMu.Lock()
		ministryAfterUpsertHooks = append(ministryAfterUpsertHooks, ministryHook)
		ministryAfterUpsertMu.Unlock()
	}
}

// One returns a single ministry record from the query.
func (q ministryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ministry, error) {
	o := &Ministry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for ministries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ministry records from the query.
func (q ministryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MinistrySlice, error) {
	var o []*Ministry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Ministry slice")
	}

	if len(ministryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ministry records in the query.
func (q ministryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count ministries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ministryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if ministries exists")
	}

	return count > 0, nil
}

// Leader pointed to by the foreign key.
func (o *Ministry) Leader(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Outreach pointed to by the foreign key.
func (o *Ministry) Outreach(mods ...qm.QueryMod) outreachQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OutreachID),
	}

	queryMods = append(queryMods, mods...)

	return Outreaches(queryMods...)
}

// LoadLeader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ministryL) LoadLeader(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMinistry interface{}, mods queries.Applicator) error {
	var slice []*Ministry
	var object *Ministry

	if singular {
		var ok bool
		object, ok = maybeMinistry.(*Ministry)
		if !ok {
			object = new(Ministry)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMinistry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMinistry))
			}
		}
	} else {
		s, ok := maybeMinistry.(*[]*Ministry)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMinistry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMinistry))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ministryR{}
		}
		if !queries.IsNil(object.LeaderID) {
			args[object.LeaderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ministryR{}
			}

			if !queries.IsNil(obj.LeaderID) {
				args[obj.LeaderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Leader = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LeaderMinistries = append(foreign.R.LeaderMinistries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LeaderID, foreign.ID) {
				local.R.Leader = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LeaderMinistries = append(foreign.R.LeaderMinistries, local)
				break
			}
		}
	}

	return nil
}

// LoadOutreach allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ministryL) LoadOutreach(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMinistry interface{}, mods queries.Applicator) error {
	var slice []*Ministry
	var object *Ministry

	if singular {
		var ok bool
		object, ok = maybeMinistry.(*Ministry)
		if !ok {
			object = new(Ministry)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMinistry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMinistry))
			}
		}
	} else {
		s, ok := maybeMinistry.(*[]*Ministry)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMinistry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMinistry))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ministryR{}
		}
		args[object.OutreachID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ministryR{}
			}

			args[obj.OutreachID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`outreaches`),
		qm.WhereIn(`outreaches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Outreach")
	}

	var resultSlice []*Outreach
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Outreach")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for outreaches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for outreaches")
	}

	if len(outreachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Outreach = foreign
		if foreign.R == nil {
			foreign.R = &outreachR{}
		}
		foreign.R.Ministries = append(foreign.R.Ministries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutreachID == foreign.ID {
				local.R.Outreach = foreign
				if foreign.R == nil {
					foreign.R = &outreachR{}
				}
				foreign.R.Ministries = append(foreign.R.Ministries, local)
				break
			}
		}
	}

	return nil
}

// SetLeader of the ministry to the related item.
// Sets o.R.Leader to related.
// Adds o to related.R.LeaderMinistries.
func (o *Ministry) SetLeader(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ministries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leader_id"}),
		strmangle.WhereClause("\"", "\"", 2, ministryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LeaderID, related.ID)
	if o.R == nil {
		o.R = &ministryR{
			Leader: related,
		}
	} else {
		o.R.Leader = related
	}

	if related.R == nil {
		related.R = &userR{
			LeaderMinistries: MinistrySlice{o},
		}
	} else {
		related.R.LeaderMinistries = append(related.R.LeaderMinistries, o)
	}

	return nil
}

// RemoveLeader relationship.
// Sets o.R.Leader to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Ministry) RemoveLeader(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.LeaderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("leader_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Leader = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LeaderMinistries {
		if queries.Equal(o.LeaderID, ri.LeaderID) {
			continue
		}

		ln := len(related.R.LeaderMinistries)
		if ln > 1 && i < ln-1 {
			related.R.LeaderMinistries[i] = related.R.LeaderMinistries[ln-1]
		}
		related.R.LeaderMinistries = related.R.LeaderMinistries[:ln-1]
		break
	}
	return nil
}

// SetOutreach of the ministry to the related item.
// Sets o.R.Outreach to related.
// Adds o to related.R.Ministries.
func (o *Ministry) SetOutreach(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Outreach) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ministries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"outreach_id"}),
		strmangle.WhereClause("\"", "\"", 2, ministryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutreachID = related.ID
	if o.R == nil {
		o.R = &ministryR{
			Outreach: related,
		}
	} else {
		o.R.Outreach = related
	}

	if related.R == nil {
		related.R = &outreachR{
			Ministries: MinistrySlice{o},
		}
	} else {
		related.R.Ministries = append(related.R.Ministries, o)
	}

	return nil
}

// Ministries retrieves all the records using an executor.
func Ministries(mods ...qm.QueryMod) ministryQuery {
	mods = append(mods, qm.From("\"ministries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ministries\".*"})
	}

	return ministryQuery{q}
}

// FindMinistry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMinistry(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Ministry, error) {
	ministryObj := &Ministry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ministries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ministryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from ministries")
	}

	if err = ministryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ministryObj, err
	}

	return ministryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ministry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no ministries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ministryInsertCacheMut.RLock()
	cache, cached := ministryInsertCache[key]
	ministryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ministryAllColumns,
			ministryColumnsWithDefault,
			ministryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ministryType, ministryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ministryType, ministryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ministries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ministries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into ministries")
	}

	if !cached {
		ministryInsertCacheMut.Lock()
		ministryInsertCache[key] = cache
		ministryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Ministry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ministry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ministryUpdateCacheMut.RLock()
	cache, cached := ministryUpdateCache[key]
	ministryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ministryAllColumns,
			ministryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update ministries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ministries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ministryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ministryType, ministryMapping, append(wl, ministryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update ministries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for ministries")
	}

	if !cached {
		ministryUpdateCacheMut.Lock()
		ministryUpdateCache[key] = cache
		ministryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ministryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for ministries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for ministries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MinistrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ministries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ministryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in ministry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all ministry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ministry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no ministries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ministryUpsertCacheMut.RLock()
	cache, cached := ministryUpsertCache[key]
	ministryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ministryAllColumns,
			ministryColumnsWithDefault,
			ministryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ministryAllColumns,
			ministryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert ministries, could not build update column list")
		}

		ret := strmangle.SetComplement(ministryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ministryPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert ministries, could not build conflict column list")
			}

			conflict = make([]string, len(ministryPrimaryKeyColumns))
			copy(conflict, ministryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ministries\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ministryType, ministryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ministryType, ministryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert ministries")
	}

	if !cached {
		ministryUpsertCacheMut.Lock()
		ministryUpsertCache[key] = cache
		ministryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Ministry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ministry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Ministry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ministryPrimaryKeyMapping)
	sql := "DELETE FROM \"ministries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from ministries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for ministries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ministryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no ministryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MinistrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ministryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ministries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministries")
	}

	if len(ministryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ministry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMinistry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MinistrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MinistrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ministries\".* FROM \"ministries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MinistrySlice")
	}

	*o = slice

	return nil
}

// MinistryExists checks if the Ministry row exists.
func MinistryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ministries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if ministries exists")
	}

	return exists, nil
}

// Exists checks if the Ministry row exists.
func (o *Ministry) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MinistryExists(ctx, exec, o.ID)
}
