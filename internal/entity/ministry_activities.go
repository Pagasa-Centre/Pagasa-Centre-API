// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MinistryActivity is an object representing the database table.
type MinistryActivity struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	MinistryID string    `boil:"ministry_id" json:"ministry_id" toml:"ministry_id" yaml:"ministry_id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *ministryActivityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ministryActivityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MinistryActivityColumns = struct {
	ID         string
	MinistryID string
	Name       string
	CreatedAt  string
}{
	ID:         "id",
	MinistryID: "ministry_id",
	Name:       "name",
	CreatedAt:  "created_at",
}

var MinistryActivityTableColumns = struct {
	ID         string
	MinistryID string
	Name       string
	CreatedAt  string
}{
	ID:         "ministry_activities.id",
	MinistryID: "ministry_activities.ministry_id",
	Name:       "ministry_activities.name",
	CreatedAt:  "ministry_activities.created_at",
}

// Generated where

var MinistryActivityWhere = struct {
	ID         whereHelperstring
	MinistryID whereHelperstring
	Name       whereHelperstring
	CreatedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"ministry_activities\".\"id\""},
	MinistryID: whereHelperstring{field: "\"ministry_activities\".\"ministry_id\""},
	Name:       whereHelperstring{field: "\"ministry_activities\".\"name\""},
	CreatedAt:  whereHelpernull_Time{field: "\"ministry_activities\".\"created_at\""},
}

// MinistryActivityRels is where relationship names are stored.
var MinistryActivityRels = struct {
	Ministry string
}{
	Ministry: "Ministry",
}

// ministryActivityR is where relationships are stored.
type ministryActivityR struct {
	Ministry *Ministry `boil:"Ministry" json:"Ministry" toml:"Ministry" yaml:"Ministry"`
}

// NewStruct creates a new relationship struct
func (*ministryActivityR) NewStruct() *ministryActivityR {
	return &ministryActivityR{}
}

func (r *ministryActivityR) GetMinistry() *Ministry {
	if r == nil {
		return nil
	}
	return r.Ministry
}

// ministryActivityL is where Load methods for each relationship are stored.
type ministryActivityL struct{}

var (
	ministryActivityAllColumns            = []string{"id", "ministry_id", "name", "created_at"}
	ministryActivityColumnsWithoutDefault = []string{"ministry_id", "name"}
	ministryActivityColumnsWithDefault    = []string{"id", "created_at"}
	ministryActivityPrimaryKeyColumns     = []string{"id"}
	ministryActivityGeneratedColumns      = []string{}
)

type (
	// MinistryActivitySlice is an alias for a slice of pointers to MinistryActivity.
	// This should almost always be used instead of []MinistryActivity.
	MinistryActivitySlice []*MinistryActivity
	// MinistryActivityHook is the signature for custom MinistryActivity hook methods
	MinistryActivityHook func(context.Context, boil.ContextExecutor, *MinistryActivity) error

	ministryActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ministryActivityType                 = reflect.TypeOf(&MinistryActivity{})
	ministryActivityMapping              = queries.MakeStructMapping(ministryActivityType)
	ministryActivityPrimaryKeyMapping, _ = queries.BindMapping(ministryActivityType, ministryActivityMapping, ministryActivityPrimaryKeyColumns)
	ministryActivityInsertCacheMut       sync.RWMutex
	ministryActivityInsertCache          = make(map[string]insertCache)
	ministryActivityUpdateCacheMut       sync.RWMutex
	ministryActivityUpdateCache          = make(map[string]updateCache)
	ministryActivityUpsertCacheMut       sync.RWMutex
	ministryActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ministryActivityAfterSelectMu sync.Mutex
var ministryActivityAfterSelectHooks []MinistryActivityHook

var ministryActivityBeforeInsertMu sync.Mutex
var ministryActivityBeforeInsertHooks []MinistryActivityHook
var ministryActivityAfterInsertMu sync.Mutex
var ministryActivityAfterInsertHooks []MinistryActivityHook

var ministryActivityBeforeUpdateMu sync.Mutex
var ministryActivityBeforeUpdateHooks []MinistryActivityHook
var ministryActivityAfterUpdateMu sync.Mutex
var ministryActivityAfterUpdateHooks []MinistryActivityHook

var ministryActivityBeforeDeleteMu sync.Mutex
var ministryActivityBeforeDeleteHooks []MinistryActivityHook
var ministryActivityAfterDeleteMu sync.Mutex
var ministryActivityAfterDeleteHooks []MinistryActivityHook

var ministryActivityBeforeUpsertMu sync.Mutex
var ministryActivityBeforeUpsertHooks []MinistryActivityHook
var ministryActivityAfterUpsertMu sync.Mutex
var ministryActivityAfterUpsertHooks []MinistryActivityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MinistryActivity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MinistryActivity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MinistryActivity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MinistryActivity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MinistryActivity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MinistryActivity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MinistryActivity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MinistryActivity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MinistryActivity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ministryActivityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMinistryActivityHook registers your hook function for all future operations.
func AddMinistryActivityHook(hookPoint boil.HookPoint, ministryActivityHook MinistryActivityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ministryActivityAfterSelectMu.Lock()
		ministryActivityAfterSelectHooks = append(ministryActivityAfterSelectHooks, ministryActivityHook)
		ministryActivityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ministryActivityBeforeInsertMu.Lock()
		ministryActivityBeforeInsertHooks = append(ministryActivityBeforeInsertHooks, ministryActivityHook)
		ministryActivityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ministryActivityAfterInsertMu.Lock()
		ministryActivityAfterInsertHooks = append(ministryActivityAfterInsertHooks, ministryActivityHook)
		ministryActivityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ministryActivityBeforeUpdateMu.Lock()
		ministryActivityBeforeUpdateHooks = append(ministryActivityBeforeUpdateHooks, ministryActivityHook)
		ministryActivityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ministryActivityAfterUpdateMu.Lock()
		ministryActivityAfterUpdateHooks = append(ministryActivityAfterUpdateHooks, ministryActivityHook)
		ministryActivityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ministryActivityBeforeDeleteMu.Lock()
		ministryActivityBeforeDeleteHooks = append(ministryActivityBeforeDeleteHooks, ministryActivityHook)
		ministryActivityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ministryActivityAfterDeleteMu.Lock()
		ministryActivityAfterDeleteHooks = append(ministryActivityAfterDeleteHooks, ministryActivityHook)
		ministryActivityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ministryActivityBeforeUpsertMu.Lock()
		ministryActivityBeforeUpsertHooks = append(ministryActivityBeforeUpsertHooks, ministryActivityHook)
		ministryActivityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ministryActivityAfterUpsertMu.Lock()
		ministryActivityAfterUpsertHooks = append(ministryActivityAfterUpsertHooks, ministryActivityHook)
		ministryActivityAfterUpsertMu.Unlock()
	}
}

// One returns a single ministryActivity record from the query.
func (q ministryActivityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MinistryActivity, error) {
	o := &MinistryActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for ministry_activities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MinistryActivity records from the query.
func (q ministryActivityQuery) All(ctx context.Context, exec boil.ContextExecutor) (MinistryActivitySlice, error) {
	var o []*MinistryActivity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to MinistryActivity slice")
	}

	if len(ministryActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MinistryActivity records in the query.
func (q ministryActivityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count ministry_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ministryActivityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if ministry_activities exists")
	}

	return count > 0, nil
}

// Ministry pointed to by the foreign key.
func (o *MinistryActivity) Ministry(mods ...qm.QueryMod) ministryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MinistryID),
	}

	queryMods = append(queryMods, mods...)

	return Ministries(queryMods...)
}

// LoadMinistry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ministryActivityL) LoadMinistry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMinistryActivity interface{}, mods queries.Applicator) error {
	var slice []*MinistryActivity
	var object *MinistryActivity

	if singular {
		var ok bool
		object, ok = maybeMinistryActivity.(*MinistryActivity)
		if !ok {
			object = new(MinistryActivity)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMinistryActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMinistryActivity))
			}
		}
	} else {
		s, ok := maybeMinistryActivity.(*[]*MinistryActivity)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMinistryActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMinistryActivity))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ministryActivityR{}
		}
		args[object.MinistryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ministryActivityR{}
			}

			args[obj.MinistryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ministries`),
		qm.WhereIn(`ministries.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ministry")
	}

	var resultSlice []*Ministry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ministry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ministries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ministries")
	}

	if len(ministryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ministry = foreign
		if foreign.R == nil {
			foreign.R = &ministryR{}
		}
		foreign.R.MinistryActivities = append(foreign.R.MinistryActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MinistryID == foreign.ID {
				local.R.Ministry = foreign
				if foreign.R == nil {
					foreign.R = &ministryR{}
				}
				foreign.R.MinistryActivities = append(foreign.R.MinistryActivities, local)
				break
			}
		}
	}

	return nil
}

// SetMinistry of the ministryActivity to the related item.
// Sets o.R.Ministry to related.
// Adds o to related.R.MinistryActivities.
func (o *MinistryActivity) SetMinistry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ministry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ministry_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ministry_id"}),
		strmangle.WhereClause("\"", "\"", 2, ministryActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MinistryID = related.ID
	if o.R == nil {
		o.R = &ministryActivityR{
			Ministry: related,
		}
	} else {
		o.R.Ministry = related
	}

	if related.R == nil {
		related.R = &ministryR{
			MinistryActivities: MinistryActivitySlice{o},
		}
	} else {
		related.R.MinistryActivities = append(related.R.MinistryActivities, o)
	}

	return nil
}

// MinistryActivities retrieves all the records using an executor.
func MinistryActivities(mods ...qm.QueryMod) ministryActivityQuery {
	mods = append(mods, qm.From("\"ministry_activities\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ministry_activities\".*"})
	}

	return ministryActivityQuery{q}
}

// FindMinistryActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMinistryActivity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MinistryActivity, error) {
	ministryActivityObj := &MinistryActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ministry_activities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ministryActivityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from ministry_activities")
	}

	if err = ministryActivityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ministryActivityObj, err
	}

	return ministryActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MinistryActivity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no ministry_activities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ministryActivityInsertCacheMut.RLock()
	cache, cached := ministryActivityInsertCache[key]
	ministryActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ministryActivityAllColumns,
			ministryActivityColumnsWithDefault,
			ministryActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ministryActivityType, ministryActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ministryActivityType, ministryActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ministry_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ministry_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into ministry_activities")
	}

	if !cached {
		ministryActivityInsertCacheMut.Lock()
		ministryActivityInsertCache[key] = cache
		ministryActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MinistryActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MinistryActivity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ministryActivityUpdateCacheMut.RLock()
	cache, cached := ministryActivityUpdateCache[key]
	ministryActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ministryActivityAllColumns,
			ministryActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update ministry_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ministry_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ministryActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ministryActivityType, ministryActivityMapping, append(wl, ministryActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update ministry_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for ministry_activities")
	}

	if !cached {
		ministryActivityUpdateCacheMut.Lock()
		ministryActivityUpdateCache[key] = cache
		ministryActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ministryActivityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for ministry_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for ministry_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MinistryActivitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ministry_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ministryActivityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in ministryActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all ministryActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MinistryActivity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no ministry_activities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ministryActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ministryActivityUpsertCacheMut.RLock()
	cache, cached := ministryActivityUpsertCache[key]
	ministryActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ministryActivityAllColumns,
			ministryActivityColumnsWithDefault,
			ministryActivityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ministryActivityAllColumns,
			ministryActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert ministry_activities, could not build update column list")
		}

		ret := strmangle.SetComplement(ministryActivityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ministryActivityPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert ministry_activities, could not build conflict column list")
			}

			conflict = make([]string, len(ministryActivityPrimaryKeyColumns))
			copy(conflict, ministryActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ministry_activities\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ministryActivityType, ministryActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ministryActivityType, ministryActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert ministry_activities")
	}

	if !cached {
		ministryActivityUpsertCacheMut.Lock()
		ministryActivityUpsertCache[key] = cache
		ministryActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MinistryActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MinistryActivity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no MinistryActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ministryActivityPrimaryKeyMapping)
	sql := "DELETE FROM \"ministry_activities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from ministry_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for ministry_activities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ministryActivityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no ministryActivityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministry_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministry_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MinistryActivitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ministryActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ministry_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryActivityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ministryActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ministry_activities")
	}

	if len(ministryActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MinistryActivity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMinistryActivity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MinistryActivitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MinistryActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ministryActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ministry_activities\".* FROM \"ministry_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ministryActivityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MinistryActivitySlice")
	}

	*o = slice

	return nil
}

// MinistryActivityExists checks if the MinistryActivity row exists.
func MinistryActivityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ministry_activities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if ministry_activities exists")
	}

	return exists, nil
}

// Exists checks if the MinistryActivity row exists.
func (o *MinistryActivity) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MinistryActivityExists(ctx, exec, o.ID)
}
