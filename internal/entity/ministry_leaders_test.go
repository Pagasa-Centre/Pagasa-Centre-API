// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMinistryLeaders(t *testing.T) {
	t.Parallel()

	query := MinistryLeaders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMinistryLeadersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryLeadersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MinistryLeaders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryLeadersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MinistryLeaderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMinistryLeadersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MinistryLeaderExists(ctx, tx, o.UserID, o.MinistryID)
	if err != nil {
		t.Errorf("Unable to check if MinistryLeader exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MinistryLeaderExists to return true, but got false.")
	}
}

func testMinistryLeadersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ministryLeaderFound, err := FindMinistryLeader(ctx, tx, o.UserID, o.MinistryID)
	if err != nil {
		t.Error(err)
	}

	if ministryLeaderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMinistryLeadersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MinistryLeaders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMinistryLeadersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MinistryLeaders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMinistryLeadersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ministryLeaderOne := &MinistryLeader{}
	ministryLeaderTwo := &MinistryLeader{}
	if err = randomize.Struct(seed, ministryLeaderOne, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}
	if err = randomize.Struct(seed, ministryLeaderTwo, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ministryLeaderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ministryLeaderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MinistryLeaders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMinistryLeadersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ministryLeaderOne := &MinistryLeader{}
	ministryLeaderTwo := &MinistryLeader{}
	if err = randomize.Struct(seed, ministryLeaderOne, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}
	if err = randomize.Struct(seed, ministryLeaderTwo, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ministryLeaderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ministryLeaderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ministryLeaderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func ministryLeaderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MinistryLeader) error {
	*o = MinistryLeader{}
	return nil
}

func testMinistryLeadersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MinistryLeader{}
	o := &MinistryLeader{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MinistryLeader object: %s", err)
	}

	AddMinistryLeaderHook(boil.BeforeInsertHook, ministryLeaderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ministryLeaderBeforeInsertHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.AfterInsertHook, ministryLeaderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ministryLeaderAfterInsertHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.AfterSelectHook, ministryLeaderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ministryLeaderAfterSelectHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.BeforeUpdateHook, ministryLeaderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ministryLeaderBeforeUpdateHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.AfterUpdateHook, ministryLeaderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ministryLeaderAfterUpdateHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.BeforeDeleteHook, ministryLeaderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ministryLeaderBeforeDeleteHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.AfterDeleteHook, ministryLeaderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ministryLeaderAfterDeleteHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.BeforeUpsertHook, ministryLeaderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ministryLeaderBeforeUpsertHooks = []MinistryLeaderHook{}

	AddMinistryLeaderHook(boil.AfterUpsertHook, ministryLeaderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ministryLeaderAfterUpsertHooks = []MinistryLeaderHook{}
}

func testMinistryLeadersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMinistryLeadersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ministryLeaderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMinistryLeaderToOneMinistryUsingMinistry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MinistryLeader
	var foreign Ministry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ministryDBTypes, false, ministryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ministry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MinistryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ministry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMinistryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ministry) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MinistryLeaderSlice{&local}
	if err = local.L.LoadMinistry(ctx, tx, false, (*[]*MinistryLeader)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ministry = nil
	if err = local.L.LoadMinistry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ministry == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMinistryLeaderToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MinistryLeader
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ministryLeaderDBTypes, false, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MinistryLeaderSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*MinistryLeader)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMinistryLeaderToOneSetOpMinistryUsingMinistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MinistryLeader
	var b, c Ministry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ministryLeaderDBTypes, false, strmangle.SetComplement(ministryLeaderPrimaryKeyColumns, ministryLeaderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ministryDBTypes, false, strmangle.SetComplement(ministryPrimaryKeyColumns, ministryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ministry{&b, &c} {
		err = a.SetMinistry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ministry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MinistryLeaders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MinistryID != x.ID {
			t.Error("foreign key was wrong value", a.MinistryID)
		}

		if exists, err := MinistryLeaderExists(ctx, tx, a.UserID, a.MinistryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMinistryLeaderToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MinistryLeader
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ministryLeaderDBTypes, false, strmangle.SetComplement(ministryLeaderPrimaryKeyColumns, ministryLeaderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MinistryLeaders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := MinistryLeaderExists(ctx, tx, a.UserID, a.MinistryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMinistryLeadersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMinistryLeadersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MinistryLeaderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMinistryLeadersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MinistryLeaders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ministryLeaderDBTypes = map[string]string{`UserID`: `uuid`, `MinistryID`: `uuid`, `AssignedAt`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testMinistryLeadersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ministryLeaderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ministryLeaderAllColumns) == len(ministryLeaderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMinistryLeadersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ministryLeaderAllColumns) == len(ministryLeaderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MinistryLeader{}
	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ministryLeaderDBTypes, true, ministryLeaderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ministryLeaderAllColumns, ministryLeaderPrimaryKeyColumns) {
		fields = ministryLeaderAllColumns
	} else {
		fields = strmangle.SetComplement(
			ministryLeaderAllColumns,
			ministryLeaderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MinistryLeaderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMinistryLeadersUpsert(t *testing.T) {
	t.Parallel()

	if len(ministryLeaderAllColumns) == len(ministryLeaderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MinistryLeader{}
	if err = randomize.Struct(seed, &o, ministryLeaderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MinistryLeader: %s", err)
	}

	count, err := MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ministryLeaderDBTypes, false, ministryLeaderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MinistryLeader struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MinistryLeader: %s", err)
	}

	count, err = MinistryLeaders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
