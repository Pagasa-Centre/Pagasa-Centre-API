// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Approval is an object representing the database table.
type Approval struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequesterID string    `boil:"requester_id" json:"requester_id" toml:"requester_id" yaml:"requester_id"`
	ApproverID  string    `boil:"approver_id" json:"approver_id" toml:"approver_id" yaml:"approver_id"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt   null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *approvalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L approvalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApprovalColumns = struct {
	ID          string
	RequesterID string
	ApproverID  string
	Type        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	RequesterID: "requester_id",
	ApproverID:  "approver_id",
	Type:        "type",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ApprovalTableColumns = struct {
	ID          string
	RequesterID string
	ApproverID  string
	Type        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "approvals.id",
	RequesterID: "approvals.requester_id",
	ApproverID:  "approvals.approver_id",
	Type:        "approvals.type",
	Status:      "approvals.status",
	CreatedAt:   "approvals.created_at",
	UpdatedAt:   "approvals.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ApprovalWhere = struct {
	ID          whereHelperstring
	RequesterID whereHelperstring
	ApproverID  whereHelperstring
	Type        whereHelperstring
	Status      whereHelperstring
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"approvals\".\"id\""},
	RequesterID: whereHelperstring{field: "\"approvals\".\"requester_id\""},
	ApproverID:  whereHelperstring{field: "\"approvals\".\"approver_id\""},
	Type:        whereHelperstring{field: "\"approvals\".\"type\""},
	Status:      whereHelperstring{field: "\"approvals\".\"status\""},
	CreatedAt:   whereHelpernull_Time{field: "\"approvals\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"approvals\".\"updated_at\""},
}

// ApprovalRels is where relationship names are stored.
var ApprovalRels = struct {
}{}

// approvalR is where relationships are stored.
type approvalR struct {
}

// NewStruct creates a new relationship struct
func (*approvalR) NewStruct() *approvalR {
	return &approvalR{}
}

// approvalL is where Load methods for each relationship are stored.
type approvalL struct{}

var (
	approvalAllColumns            = []string{"id", "requester_id", "approver_id", "type", "status", "created_at", "updated_at"}
	approvalColumnsWithoutDefault = []string{"requester_id", "approver_id", "type", "status"}
	approvalColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	approvalPrimaryKeyColumns     = []string{"id"}
	approvalGeneratedColumns      = []string{}
)

type (
	// ApprovalSlice is an alias for a slice of pointers to Approval.
	// This should almost always be used instead of []Approval.
	ApprovalSlice []*Approval
	// ApprovalHook is the signature for custom Approval hook methods
	ApprovalHook func(context.Context, boil.ContextExecutor, *Approval) error

	approvalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	approvalType                 = reflect.TypeOf(&Approval{})
	approvalMapping              = queries.MakeStructMapping(approvalType)
	approvalPrimaryKeyMapping, _ = queries.BindMapping(approvalType, approvalMapping, approvalPrimaryKeyColumns)
	approvalInsertCacheMut       sync.RWMutex
	approvalInsertCache          = make(map[string]insertCache)
	approvalUpdateCacheMut       sync.RWMutex
	approvalUpdateCache          = make(map[string]updateCache)
	approvalUpsertCacheMut       sync.RWMutex
	approvalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var approvalAfterSelectMu sync.Mutex
var approvalAfterSelectHooks []ApprovalHook

var approvalBeforeInsertMu sync.Mutex
var approvalBeforeInsertHooks []ApprovalHook
var approvalAfterInsertMu sync.Mutex
var approvalAfterInsertHooks []ApprovalHook

var approvalBeforeUpdateMu sync.Mutex
var approvalBeforeUpdateHooks []ApprovalHook
var approvalAfterUpdateMu sync.Mutex
var approvalAfterUpdateHooks []ApprovalHook

var approvalBeforeDeleteMu sync.Mutex
var approvalBeforeDeleteHooks []ApprovalHook
var approvalAfterDeleteMu sync.Mutex
var approvalAfterDeleteHooks []ApprovalHook

var approvalBeforeUpsertMu sync.Mutex
var approvalBeforeUpsertHooks []ApprovalHook
var approvalAfterUpsertMu sync.Mutex
var approvalAfterUpsertHooks []ApprovalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Approval) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Approval) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Approval) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Approval) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Approval) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Approval) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Approval) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Approval) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Approval) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range approvalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddApprovalHook registers your hook function for all future operations.
func AddApprovalHook(hookPoint boil.HookPoint, approvalHook ApprovalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		approvalAfterSelectMu.Lock()
		approvalAfterSelectHooks = append(approvalAfterSelectHooks, approvalHook)
		approvalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		approvalBeforeInsertMu.Lock()
		approvalBeforeInsertHooks = append(approvalBeforeInsertHooks, approvalHook)
		approvalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		approvalAfterInsertMu.Lock()
		approvalAfterInsertHooks = append(approvalAfterInsertHooks, approvalHook)
		approvalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		approvalBeforeUpdateMu.Lock()
		approvalBeforeUpdateHooks = append(approvalBeforeUpdateHooks, approvalHook)
		approvalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		approvalAfterUpdateMu.Lock()
		approvalAfterUpdateHooks = append(approvalAfterUpdateHooks, approvalHook)
		approvalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		approvalBeforeDeleteMu.Lock()
		approvalBeforeDeleteHooks = append(approvalBeforeDeleteHooks, approvalHook)
		approvalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		approvalAfterDeleteMu.Lock()
		approvalAfterDeleteHooks = append(approvalAfterDeleteHooks, approvalHook)
		approvalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		approvalBeforeUpsertMu.Lock()
		approvalBeforeUpsertHooks = append(approvalBeforeUpsertHooks, approvalHook)
		approvalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		approvalAfterUpsertMu.Lock()
		approvalAfterUpsertHooks = append(approvalAfterUpsertHooks, approvalHook)
		approvalAfterUpsertMu.Unlock()
	}
}

// One returns a single approval record from the query.
func (q approvalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Approval, error) {
	o := &Approval{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for approvals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Approval records from the query.
func (q approvalQuery) All(ctx context.Context, exec boil.ContextExecutor) (ApprovalSlice, error) {
	var o []*Approval

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Approval slice")
	}

	if len(approvalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Approval records in the query.
func (q approvalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count approvals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q approvalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if approvals exists")
	}

	return count > 0, nil
}

// Approvals retrieves all the records using an executor.
func Approvals(mods ...qm.QueryMod) approvalQuery {
	mods = append(mods, qm.From("\"approvals\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"approvals\".*"})
	}

	return approvalQuery{q}
}

// FindApproval retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApproval(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Approval, error) {
	approvalObj := &Approval{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"approvals\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, approvalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from approvals")
	}

	if err = approvalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return approvalObj, err
	}

	return approvalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Approval) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no approvals provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(approvalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	approvalInsertCacheMut.RLock()
	cache, cached := approvalInsertCache[key]
	approvalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			approvalAllColumns,
			approvalColumnsWithDefault,
			approvalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(approvalType, approvalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(approvalType, approvalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"approvals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"approvals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into approvals")
	}

	if !cached {
		approvalInsertCacheMut.Lock()
		approvalInsertCache[key] = cache
		approvalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Approval.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Approval) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	approvalUpdateCacheMut.RLock()
	cache, cached := approvalUpdateCache[key]
	approvalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			approvalAllColumns,
			approvalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update approvals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"approvals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, approvalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(approvalType, approvalMapping, append(wl, approvalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update approvals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for approvals")
	}

	if !cached {
		approvalUpdateCacheMut.Lock()
		approvalUpdateCache[key] = cache
		approvalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q approvalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for approvals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for approvals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApprovalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), approvalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"approvals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, approvalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in approval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all approval")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Approval) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no approvals provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(approvalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	approvalUpsertCacheMut.RLock()
	cache, cached := approvalUpsertCache[key]
	approvalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			approvalAllColumns,
			approvalColumnsWithDefault,
			approvalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			approvalAllColumns,
			approvalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert approvals, could not build update column list")
		}

		ret := strmangle.SetComplement(approvalAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(approvalPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert approvals, could not build conflict column list")
			}

			conflict = make([]string, len(approvalPrimaryKeyColumns))
			copy(conflict, approvalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"approvals\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(approvalType, approvalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(approvalType, approvalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert approvals")
	}

	if !cached {
		approvalUpsertCacheMut.Lock()
		approvalUpsertCache[key] = cache
		approvalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Approval record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Approval) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Approval provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), approvalPrimaryKeyMapping)
	sql := "DELETE FROM \"approvals\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from approvals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for approvals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q approvalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no approvalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from approvals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for approvals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApprovalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(approvalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), approvalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"approvals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, approvalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from approval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for approvals")
	}

	if len(approvalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Approval) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindApproval(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApprovalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApprovalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), approvalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"approvals\".* FROM \"approvals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, approvalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ApprovalSlice")
	}

	*o = slice

	return nil
}

// ApprovalExists checks if the Approval row exists.
func ApprovalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"approvals\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if approvals exists")
	}

	return exists, nil
}

// Exists checks if the Approval row exists.
func (o *Approval) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ApprovalExists(ctx, exec, o.ID)
}
