// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOutreachServices(t *testing.T) {
	t.Parallel()

	query := OutreachServices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOutreachServicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachServicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OutreachServices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachServicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutreachServiceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutreachServicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OutreachServiceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OutreachService exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OutreachServiceExists to return true, but got false.")
	}
}

func testOutreachServicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	outreachServiceFound, err := FindOutreachService(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if outreachServiceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOutreachServicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OutreachServices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOutreachServicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OutreachServices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOutreachServicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	outreachServiceOne := &OutreachService{}
	outreachServiceTwo := &OutreachService{}
	if err = randomize.Struct(seed, outreachServiceOne, outreachServiceDBTypes, false, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}
	if err = randomize.Struct(seed, outreachServiceTwo, outreachServiceDBTypes, false, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outreachServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outreachServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutreachServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOutreachServicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	outreachServiceOne := &OutreachService{}
	outreachServiceTwo := &OutreachService{}
	if err = randomize.Struct(seed, outreachServiceOne, outreachServiceDBTypes, false, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}
	if err = randomize.Struct(seed, outreachServiceTwo, outreachServiceDBTypes, false, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outreachServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outreachServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func outreachServiceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func outreachServiceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutreachService) error {
	*o = OutreachService{}
	return nil
}

func testOutreachServicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OutreachService{}
	o := &OutreachService{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OutreachService object: %s", err)
	}

	AddOutreachServiceHook(boil.BeforeInsertHook, outreachServiceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	outreachServiceBeforeInsertHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.AfterInsertHook, outreachServiceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	outreachServiceAfterInsertHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.AfterSelectHook, outreachServiceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	outreachServiceAfterSelectHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.BeforeUpdateHook, outreachServiceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	outreachServiceBeforeUpdateHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.AfterUpdateHook, outreachServiceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	outreachServiceAfterUpdateHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.BeforeDeleteHook, outreachServiceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	outreachServiceBeforeDeleteHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.AfterDeleteHook, outreachServiceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	outreachServiceAfterDeleteHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.BeforeUpsertHook, outreachServiceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	outreachServiceBeforeUpsertHooks = []OutreachServiceHook{}

	AddOutreachServiceHook(boil.AfterUpsertHook, outreachServiceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	outreachServiceAfterUpsertHooks = []OutreachServiceHook{}
}

func testOutreachServicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutreachServicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(outreachServiceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutreachServiceToOneOutreachUsingOutreach(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OutreachService
	var foreign Outreach

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, outreachServiceDBTypes, false, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, outreachDBTypes, false, outreachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Outreach struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OutreachID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Outreach().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOutreachHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Outreach) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OutreachServiceSlice{&local}
	if err = local.L.LoadOutreach(ctx, tx, false, (*[]*OutreachService)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Outreach == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Outreach = nil
	if err = local.L.LoadOutreach(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Outreach == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOutreachServiceToOneSetOpOutreachUsingOutreach(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OutreachService
	var b, c Outreach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outreachServiceDBTypes, false, strmangle.SetComplement(outreachServicePrimaryKeyColumns, outreachServiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, outreachDBTypes, false, strmangle.SetComplement(outreachPrimaryKeyColumns, outreachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Outreach{&b, &c} {
		err = a.SetOutreach(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Outreach != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OutreachServices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OutreachID != x.ID {
			t.Error("foreign key was wrong value", a.OutreachID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OutreachID))
		reflect.Indirect(reflect.ValueOf(&a.OutreachID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OutreachID != x.ID {
			t.Error("foreign key was wrong value", a.OutreachID, x.ID)
		}
	}
}

func testOutreachServicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutreachServicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutreachServiceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutreachServicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutreachServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	outreachServiceDBTypes = map[string]string{`ID`: `uuid`, `Day`: `character varying`, `StartTime`: `time without time zone`, `EndTime`: `time without time zone`, `OutreachID`: `uuid`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testOutreachServicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(outreachServicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(outreachServiceAllColumns) == len(outreachServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOutreachServicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(outreachServiceAllColumns) == len(outreachServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutreachService{}
	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outreachServiceDBTypes, true, outreachServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(outreachServiceAllColumns, outreachServicePrimaryKeyColumns) {
		fields = outreachServiceAllColumns
	} else {
		fields = strmangle.SetComplement(
			outreachServiceAllColumns,
			outreachServicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OutreachServiceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOutreachServicesUpsert(t *testing.T) {
	t.Parallel()

	if len(outreachServiceAllColumns) == len(outreachServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OutreachService{}
	if err = randomize.Struct(seed, &o, outreachServiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutreachService: %s", err)
	}

	count, err := OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, outreachServiceDBTypes, false, outreachServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutreachService struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutreachService: %s", err)
	}

	count, err = OutreachServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
