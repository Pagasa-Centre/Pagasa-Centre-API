// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventDay is an object representing the database table.
type EventDay struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID   string    `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	Date      time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	StartTime null.Time `boil:"start_time" json:"start_time,omitempty" toml:"start_time" yaml:"start_time,omitempty"`
	EndTime   null.Time `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *eventDayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventDayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventDayColumns = struct {
	ID        string
	EventID   string
	Date      string
	StartTime string
	EndTime   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	EventID:   "event_id",
	Date:      "date",
	StartTime: "start_time",
	EndTime:   "end_time",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var EventDayTableColumns = struct {
	ID        string
	EventID   string
	Date      string
	StartTime string
	EndTime   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "event_days.id",
	EventID:   "event_days.event_id",
	Date:      "event_days.date",
	StartTime: "event_days.start_time",
	EndTime:   "event_days.end_time",
	CreatedAt: "event_days.created_at",
	UpdatedAt: "event_days.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EventDayWhere = struct {
	ID        whereHelperstring
	EventID   whereHelperstring
	Date      whereHelpertime_Time
	StartTime whereHelpernull_Time
	EndTime   whereHelpernull_Time
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"event_days\".\"id\""},
	EventID:   whereHelperstring{field: "\"event_days\".\"event_id\""},
	Date:      whereHelpertime_Time{field: "\"event_days\".\"date\""},
	StartTime: whereHelpernull_Time{field: "\"event_days\".\"start_time\""},
	EndTime:   whereHelpernull_Time{field: "\"event_days\".\"end_time\""},
	CreatedAt: whereHelpernull_Time{field: "\"event_days\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"event_days\".\"updated_at\""},
}

// EventDayRels is where relationship names are stored.
var EventDayRels = struct {
	Event string
}{
	Event: "Event",
}

// eventDayR is where relationships are stored.
type eventDayR struct {
	Event *Event `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
}

// NewStruct creates a new relationship struct
func (*eventDayR) NewStruct() *eventDayR {
	return &eventDayR{}
}

func (r *eventDayR) GetEvent() *Event {
	if r == nil {
		return nil
	}
	return r.Event
}

// eventDayL is where Load methods for each relationship are stored.
type eventDayL struct{}

var (
	eventDayAllColumns            = []string{"id", "event_id", "date", "start_time", "end_time", "created_at", "updated_at"}
	eventDayColumnsWithoutDefault = []string{"event_id", "date"}
	eventDayColumnsWithDefault    = []string{"id", "start_time", "end_time", "created_at", "updated_at"}
	eventDayPrimaryKeyColumns     = []string{"id"}
	eventDayGeneratedColumns      = []string{}
)

type (
	// EventDaySlice is an alias for a slice of pointers to EventDay.
	// This should almost always be used instead of []EventDay.
	EventDaySlice []*EventDay
	// EventDayHook is the signature for custom EventDay hook methods
	EventDayHook func(context.Context, boil.ContextExecutor, *EventDay) error

	eventDayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventDayType                 = reflect.TypeOf(&EventDay{})
	eventDayMapping              = queries.MakeStructMapping(eventDayType)
	eventDayPrimaryKeyMapping, _ = queries.BindMapping(eventDayType, eventDayMapping, eventDayPrimaryKeyColumns)
	eventDayInsertCacheMut       sync.RWMutex
	eventDayInsertCache          = make(map[string]insertCache)
	eventDayUpdateCacheMut       sync.RWMutex
	eventDayUpdateCache          = make(map[string]updateCache)
	eventDayUpsertCacheMut       sync.RWMutex
	eventDayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventDayAfterSelectMu sync.Mutex
var eventDayAfterSelectHooks []EventDayHook

var eventDayBeforeInsertMu sync.Mutex
var eventDayBeforeInsertHooks []EventDayHook
var eventDayAfterInsertMu sync.Mutex
var eventDayAfterInsertHooks []EventDayHook

var eventDayBeforeUpdateMu sync.Mutex
var eventDayBeforeUpdateHooks []EventDayHook
var eventDayAfterUpdateMu sync.Mutex
var eventDayAfterUpdateHooks []EventDayHook

var eventDayBeforeDeleteMu sync.Mutex
var eventDayBeforeDeleteHooks []EventDayHook
var eventDayAfterDeleteMu sync.Mutex
var eventDayAfterDeleteHooks []EventDayHook

var eventDayBeforeUpsertMu sync.Mutex
var eventDayBeforeUpsertHooks []EventDayHook
var eventDayAfterUpsertMu sync.Mutex
var eventDayAfterUpsertHooks []EventDayHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventDay) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventDay) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventDay) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventDay) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventDay) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventDay) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventDay) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventDay) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventDay) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventDayAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventDayHook registers your hook function for all future operations.
func AddEventDayHook(hookPoint boil.HookPoint, eventDayHook EventDayHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventDayAfterSelectMu.Lock()
		eventDayAfterSelectHooks = append(eventDayAfterSelectHooks, eventDayHook)
		eventDayAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		eventDayBeforeInsertMu.Lock()
		eventDayBeforeInsertHooks = append(eventDayBeforeInsertHooks, eventDayHook)
		eventDayBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		eventDayAfterInsertMu.Lock()
		eventDayAfterInsertHooks = append(eventDayAfterInsertHooks, eventDayHook)
		eventDayAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		eventDayBeforeUpdateMu.Lock()
		eventDayBeforeUpdateHooks = append(eventDayBeforeUpdateHooks, eventDayHook)
		eventDayBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		eventDayAfterUpdateMu.Lock()
		eventDayAfterUpdateHooks = append(eventDayAfterUpdateHooks, eventDayHook)
		eventDayAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		eventDayBeforeDeleteMu.Lock()
		eventDayBeforeDeleteHooks = append(eventDayBeforeDeleteHooks, eventDayHook)
		eventDayBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		eventDayAfterDeleteMu.Lock()
		eventDayAfterDeleteHooks = append(eventDayAfterDeleteHooks, eventDayHook)
		eventDayAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		eventDayBeforeUpsertMu.Lock()
		eventDayBeforeUpsertHooks = append(eventDayBeforeUpsertHooks, eventDayHook)
		eventDayBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		eventDayAfterUpsertMu.Lock()
		eventDayAfterUpsertHooks = append(eventDayAfterUpsertHooks, eventDayHook)
		eventDayAfterUpsertMu.Unlock()
	}
}

// One returns a single eventDay record from the query.
func (q eventDayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventDay, error) {
	o := &EventDay{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for event_days")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventDay records from the query.
func (q eventDayQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventDaySlice, error) {
	var o []*EventDay

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to EventDay slice")
	}

	if len(eventDayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventDay records in the query.
func (q eventDayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count event_days rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventDayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if event_days exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *EventDay) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	return Events(queryMods...)
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventDayL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventDay interface{}, mods queries.Applicator) error {
	var slice []*EventDay
	var object *EventDay

	if singular {
		var ok bool
		object, ok = maybeEventDay.(*EventDay)
		if !ok {
			object = new(EventDay)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventDay))
			}
		}
	} else {
		s, ok := maybeEventDay.(*[]*EventDay)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventDay))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &eventDayR{}
		}
		args[object.EventID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventDayR{}
			}

			args[obj.EventID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.EventDays = append(foreign.R.EventDays, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.EventDays = append(foreign.R.EventDays, local)
				break
			}
		}
	}

	return nil
}

// SetEvent of the eventDay to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventDays.
func (o *EventDay) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_days\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventDayPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &eventDayR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			EventDays: EventDaySlice{o},
		}
	} else {
		related.R.EventDays = append(related.R.EventDays, o)
	}

	return nil
}

// EventDays retrieves all the records using an executor.
func EventDays(mods ...qm.QueryMod) eventDayQuery {
	mods = append(mods, qm.From("\"event_days\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"event_days\".*"})
	}

	return eventDayQuery{q}
}

// FindEventDay retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventDay(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*EventDay, error) {
	eventDayObj := &EventDay{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_days\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, eventDayObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from event_days")
	}

	if err = eventDayObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventDayObj, err
	}

	return eventDayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventDay) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no event_days provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventDayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventDayInsertCacheMut.RLock()
	cache, cached := eventDayInsertCache[key]
	eventDayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventDayAllColumns,
			eventDayColumnsWithDefault,
			eventDayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventDayType, eventDayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventDayType, eventDayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_days\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_days\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into event_days")
	}

	if !cached {
		eventDayInsertCacheMut.Lock()
		eventDayInsertCache[key] = cache
		eventDayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventDay.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventDay) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventDayUpdateCacheMut.RLock()
	cache, cached := eventDayUpdateCache[key]
	eventDayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventDayAllColumns,
			eventDayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update event_days, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_days\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventDayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventDayType, eventDayMapping, append(wl, eventDayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update event_days row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for event_days")
	}

	if !cached {
		eventDayUpdateCacheMut.Lock()
		eventDayUpdateCache[key] = cache
		eventDayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventDayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for event_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for event_days")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventDaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_days\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventDayPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in eventDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all eventDay")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventDay) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no event_days provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventDayColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventDayUpsertCacheMut.RLock()
	cache, cached := eventDayUpsertCache[key]
	eventDayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			eventDayAllColumns,
			eventDayColumnsWithDefault,
			eventDayColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventDayAllColumns,
			eventDayPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert event_days, could not build update column list")
		}

		ret := strmangle.SetComplement(eventDayAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(eventDayPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert event_days, could not build conflict column list")
			}

			conflict = make([]string, len(eventDayPrimaryKeyColumns))
			copy(conflict, eventDayPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_days\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(eventDayType, eventDayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventDayType, eventDayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert event_days")
	}

	if !cached {
		eventDayUpsertCacheMut.Lock()
		eventDayUpsertCache[key] = cache
		eventDayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EventDay record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventDay) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no EventDay provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventDayPrimaryKeyMapping)
	sql := "DELETE FROM \"event_days\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from event_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for event_days")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventDayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no eventDayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from event_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for event_days")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventDaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventDayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventDayPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from eventDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for event_days")
	}

	if len(eventDayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventDay) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventDay(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventDaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventDaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_days\".* FROM \"event_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventDayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in EventDaySlice")
	}

	*o = slice

	return nil
}

// EventDayExists checks if the EventDay row exists.
func EventDayExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_days\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if event_days exists")
	}

	return exists, nil
}

// Exists checks if the EventDay row exists.
func (o *EventDay) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventDayExists(ctx, exec, o.ID)
}
